(function (console) { "use strict";
var $hxClasses = {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = true;
Lambda.has = function(it,elt) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(x == elt) return true;
	}
	return false;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var v2 = $it0.next();
		if(v == v2) return i;
		i++;
	}
	return -1;
};
Math.__name__ = true;
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = true;
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = true;
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var tannus_concurrent_JSWorker = function() {
	null;
};
$hxClasses["tannus.concurrent.JSWorker"] = tannus_concurrent_JSWorker;
tannus_concurrent_JSWorker.__name__ = true;
tannus_concurrent_JSWorker.prototype = {
	process: function(data,callb) {
		console.log(data);
		callb(null);
		null;
	}
	,__class__: tannus_concurrent_JSWorker
};
var TestWorker = function() {
	tannus_concurrent_JSWorker.call(this);
};
$hxClasses["TestWorker"] = TestWorker;
TestWorker.__name__ = true;
TestWorker.main = function() {
	"s85628:%IDApIHsKCQkJCQkJaWYodWNvdW50ID09IDEpIHRoaXMuYnVmLmIgKz0gIm4iOyBlbHNlIHsKCQkJCQkJCXRoaXMuYnVmLmIgKz0gInUiOwoJCQkJCQkJaWYodWNvdW50ID09IG51bGwpIHRoaXMuYnVmLmIgKz0gIm51bGwiOyBlbHNlIHRoaXMuYnVmLmIgKz0gIiIgKyB1Y291bnQ7CgkJCQkJCX0KCQkJCQl9CgkJCQkJdGhpcy5idWYuYiArPSAiaCI7CgkJCQkJYnJlYWs7CgkJCQljYXNlIExpc3Q6CgkJCQkJdGhpcy5idWYuYiArPSAibCI7CgkJCQkJdmFyIHYzID0gdjsKCQkJCQl2YXIgX2cxX2hlYWQgPSB2My5oOwoJCQkJCXZhciBfZzFfdmFsID0gbnVsbDsKCQkJCQl3aGlsZShfZzFfaGVhZCAhPSBudWxsKSB7CgkJCQkJCXZhciBpMTsKCQkJCQkJX2cxX3ZhbCA9IF9nMV9oZWFkWzBdOwoJCQkJCQlfZzFfaGVhZCA9IF9nMV9oZWFkWzFdOwoJCQkJCQlpMSA9IF9nMV92YWw7CgkJCQkJCXRoaXMuc2VyaWFsaXplKGkxKTsKCQkJCQl9CgkJCQkJdGhpcy5idWYuYiArPSAiaCI7CgkJCQkJYnJlYWs7CgkJCQljYXNlIERhdGU6CgkJCQkJdmFyIGQgPSB2OwoJCQkJCXRoaXMuYnVmLmIgKz0gInYiOwoJCQkJCXRoaXMuYnVmLmFkZChkLmdldFRpbWUoKSk7CgkJCQkJYnJlYWs7CgkJCQljYXNlIGhheGVfZHNfU3RyaW5nTWFwOgoJCQkJCXRoaXMuYnVmLmIgKz0gImIiOwoJCQkJCXZhciB2NCA9IHY7CgkJCQkJdmFyICRpdDAgPSB2NC5rZXlzKCk7CgkJCQkJd2hpbGUoICRpdDAuaGFzTmV4dCgpICkgewoJCQkJCQl2YXIgayA9ICRpdDAubmV4dCgpOwoJCQkJCQl0aGlzLnNlcmlhbGl6ZVN0cmluZyhrKTsKCQkJCQkJdGhpcy5zZXJpYWxpemUoX19tYXBfcmVzZXJ2ZWRba10gIT0gbnVsbD92NC5nZXRSZXNlcnZlZChrKTp2NC5oW2tdKTsKCQkJCQl9CgkJCQkJdGhpcy5idWYuYiArPSAiaCI7CgkJCQkJYnJlYWs7CgkJCQljYXNlIGhheGVfZHNfSW50TWFwOgoJCQkJCXRoaXMuYnVmLmIgKz0gInEiOwoJCQkJCXZhciB2NSA9IHY7CgkJCQkJdmFyICRpdDEgPSB2NS5rZXlzKCk7CgkJCQkJd2hpbGUoICRpdDEuaGFzTmV4dCgpICkgewoJCQkJCQl2YXIgazEgPSAkaXQxLm5leHQoKTsKCQkJCQkJdGhpcy5idWYuYiArPSAiOiI7CgkJCQkJCWlmKGsxID09IG51bGwpIHRoaXMuYnVmLmIgKz0gIm51bGwiOyBlbHNlIHRoaXMuYnVmLmIgKz0gIiIgKyBrMTsKCQkJCQkJdGhpcy5zZXJpYWxpemUodjUuaFtrMV0pOwoJCQkJCX0KCQkJCQl0aGlzLmJ1Zi5iICs9ICJoIjsKCQkJCQlicmVhazsKCQkJCWNhc2UgaGF4ZV9kc19PYmplY3RNYXA6CgkJCQkJdGhpcy5idWYuYiArPSAiTSI7CgkJCQkJdmFyIHY2ID0gdjsKCQkJCQl2YXIgJGl0MiA9IHY2LmtleXMoKTsKCQkJCQl3aGlsZSggJGl0Mi5oYXNOZXh0KCkgKSB7CgkJCQkJCXZhciBrMiA9ICRpdDIubmV4dCgpOwoJCQkJCQl2YXIgaWQgPSBSZWZsZWN0LmZpZWxkKGsyLCJfX2lkX18iKTsKCQkJCQkJUmVmbGVjdC5kZWxldGVGaWVsZChrMiwiX19pZF9fIik7CgkJCQkJCXRoaXMuc2VyaWFsaXplKGsyKTsKCQkJCQkJazIuX19pZF9fID0gaWQ7CgkJCQkJCXRoaXMuc2VyaWFsaXplKHY2LmhbazIuX19pZF9fXSk7CgkJCQkJfQoJCQkJCXRoaXMuYnVmLmIgKz0gImgiOwoJCQkJCWJyZWFrOwoJCQkJY2FzZSBoYXhlX2lvX0J5dGVzOgoJCQkJCXZhciB2NyA9IHY7CgkJCQkJdmFyIGkyID0gMDsKCQkJCQl2YXIgbWF4ID0gdjcubGVuZ3RoIC0gMjsKCQkJCQl2YXIgY2hhcnNCdWYgPSBuZXcgU3RyaW5nQnVmKCk7CgkJCQkJdmFyIGI2NCA9IGhheGVfU2VyaWFsaXplci5CQVNFNjQ7CgkJCQkJd2hpbGUoaTIgPCBtYXgpIHsKCQkJCQkJdmFyIGIxID0gdjcuZ2V0KGkyKyspOwoJCQkJCQl2YXIgYjIgPSB2Ny5nZXQoaTIrKyk7CgkJCQkJCXZhciBiMyA9IHY3LmdldChpMisrKTsKCQkJCQkJY2hhcnNCdWYuYWRkKGI2NC5jaGFyQXQoYjEgPj4gMikpOwoJCQkJCQljaGFyc0J1Zi5hZGQoYjY0LmNoYXJBdCgoYjEgPDwgNCB8IGIyID4%IDQpICYgNjMpKTsKCQkJCQkJY2hhcnNCdWYuYWRkKGI2NC5jaGFyQXQoKGIyIDw8IDIgfCBiMyA%PiA2KSAmIDYzKSk7CgkJCQkJCWNoYXJzQnVmLmFkZChiNjQuY2hhckF0KGIzICYgNjMpKTsKCQkJCQl9CgkJCQkJaWYoaTIgPT0gbWF4KSB7CgkJCQkJCXZhciBiMTEgPSB2Ny5nZXQoaTIrKyk7CgkJCQkJCXZhciBiMjEgPSB2Ny5nZXQoaTIrKyk7CgkJCQkJCWNoYXJzQnVmLmFkZChiNjQuY2hhckF0KGIxMSA%PiAyKSk7CgkJCQkJCWNoYXJzQnVmLmFkZChiNjQuY2hhckF0KChiMTEgPDwgNCB8IGIyMSA%PiA0KSAmIDYzKSk7CgkJCQkJCWNoYXJzQnVmLmFkZChiNjQuY2hhckF0KGIyMSA8PCAyICYgNjMpKTsKCQkJCQl9IGVsc2UgaWYoaTIgPT0gbWF4ICsgMSkgewoJCQkJCQl2YXIgYjEyID0gdjcuZ2V0KGkyKyspOwoJCQkJCQljaGFyc0J1Zi5hZGQoYjY0LmNoYXJBdChiMTIgPj4gMikpOwoJCQkJCQljaGFyc0J1Zi5hZGQoYjY0LmNoYXJBdChiMTIgPDwgNCAmIDYzKSk7CgkJCQkJfQoJCQkJCXZhciBjaGFycyA9IGNoYXJzQnVmLmI7CgkJCQkJdGhpcy5idWYuYiArPSAicyI7CgkJCQkJaWYoY2hhcnMubGVuZ3RoID09IG51bGwpIHRoaXMuYnVmLmIgKz0gIm51bGwiOyBlbHNlIHRoaXMuYnVmLmIgKz0gIiIgKyBjaGFycy5sZW5ndGg7CgkJCQkJdGhpcy5idWYuYiArPSAiOiI7CgkJCQkJaWYoY2hhcnMgPT0gbnVsbCkgdGhpcy5idWYuYiArPSAibnVsbCI7IGVsc2UgdGhpcy5idWYuYiArPSAiIiArIGNoYXJzOwoJCQkJCWJyZWFrOwoJCQkJZGVmYXVsdDoKCQkJCQlpZih0aGlzLnVzZUNhY2hlKSB0aGlzLmNhY2hlLnBvcCgpOwoJCQkJCWlmKHYuaHhTZXJpYWxpemUgIT0gbnVsbCkgewoJCQkJCQl0aGlzLmJ1Zi5iICs9ICJDIjsKCQkJCQkJdGhpcy5zZXJpYWxpemVTdHJpbmcoVHlwZS5nZXRDbGFzc05hbWUoYykpOwoJCQkJCQlpZih0aGlzLnVzZUNhY2hlKSB0aGlzLmNhY2hlLnB1c2godik7CgkJCQkJCXYuaHhTZXJpYWxpemUodGhpcyk7CgkJCQkJCXRoaXMuYnVmLmIgKz0gImciOwoJCQkJCX0gZWxzZSB7CgkJCQkJCXRoaXMuYnVmLmIgKz0gImMiOwoJCQkJCQl0aGlzLnNlcmlhbGl6ZVN0cmluZyhUeXBlLmdldENsYXNzTmFtZShjKSk7CgkJCQkJCWlmKHRoaXMudXNlQ2FjaGUpIHRoaXMuY2FjaGUucHVzaCh2KTsKCQkJCQkJdGhpcy5zZXJpYWxpemVGaWVsZHModik7CgkJCQkJfQoJCQkJfQoJCQkJYnJlYWs7CgkJCWNhc2UgNDoKCQkJCWlmKGpzX0Jvb3QuX19pbnN0YW5jZW9mKHYsQ2xhc3MpKSB7CgkJCQkJdmFyIGNsYXNzTmFtZSA9IFR5cGUuZ2V0Q2xhc3NOYW1lKHYpOwoJCQkJCXRoaXMuYnVmLmIgKz0gIkEiOwoJCQkJCXRoaXMuc2VyaWFsaXplU3RyaW5nKGNsYXNzTmFtZSk7CgkJCQl9IGVsc2UgaWYoanNfQm9vdC5fX2luc3RhbmNlb2YodixFbnVtKSkgewoJCQkJCXRoaXMuYnVmLmIgKz0gIkIiOwoJCQkJCXRoaXMuc2VyaWFsaXplU3RyaW5nKFR5cGUuZ2V0RW51bU5hbWUodikpOwoJCQkJfSBlbHNlIHsKCQkJCQlpZih0aGlzLnVzZUNhY2hlICYmIHRoaXMuc2VyaWFsaXplUmVmKHYpKSByZXR1cm47CgkJCQkJdGhpcy5idWYuYiArPSAibyI7CgkJCQkJdGhpcy5zZXJpYWxpemVGaWVsZHModik7CgkJCQl9CgkJCQlicmVhazsKCQkJY2FzZSA3OgoJCQkJdmFyIGUgPSBfZ1syXTsKCQkJCWlmKHRoaXMudXNlQ2FjaGUpIHsKCQkJCQlpZih0aGlzLnNlcmlhbGl6ZVJlZih2KSkgcmV0dXJuOwoJCQkJCXRoaXMuY2FjaGUucG9wKCk7CgkJCQl9CgkJCQlpZih0aGlzLnVzZUVudW1JbmRleCkgdGhpcy5idWYuYiArPSAiaiI7IGVsc2UgdGhpcy5idWYuYiArPSAidyI7CgkJCQl0aGlzLnNlcmlhbGl6ZVN0cmluZyhUeXBlLmdldEVudW1OYW1lKGUpKTsKCQkJCWlmKHRoaXMudXNlRW51bUluZGV4KSB7CgkJCQkJdGhpcy5idWYuYiArPSAiOiI7CgkJCQkJdGhpcy5idWYuYiArPSBTdGQuc3RyaW5nKHZbMV0pOwoJCQkJfSBlbHNlIHRoaXMuc2VyaWFsaXplU3RyaW5nKHZbMF0pOwoJCQkJdGhpcy5idWYuYiArPSAiOiI7CgkJCQl2YXIgbDEgPSB2Lmxlbmd0aDsKCQkJCXRoaXMuYnVmLmIgKz0gU3RkLnN0cmluZyhsMSAtIDIpOwoJCQkJdmFyIF9nMTEgPSAyOwoJCQkJd2hpbGUoX2cxMSA8IGwxKSB7CgkJCQkJdmFyIGkzID0gX2cxMSsrOwoJCQkJCXRoaXMuc2VyaWFsaXplKHZbaTNdKTsKCQkJCX0KCQkJCWlmKHRoaXMudXNlQ2FjaGUpIHRoaXMuY2FjaGUucHVzaCh2KTsKCQkJCWJyZWFrOwoJCQljYXNlIDU6CgkJCQl0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiQ2Fubm90IHNlcmlhbGl6ZSBmdW5jdGlvbiIpOwoJCQkJYnJlYWs7CgkJCWRlZmF1bHQ6CgkJCQl0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiQ2Fubm90IHNlcmlhbGl6ZSAiICsgU3RkLnN0cmluZyh2KSk7CgkJCX0KCQl9Cgl9CgksX19jbGFzc19fOiBoYXhlX1NlcmlhbGl6ZXIKfTsKdmFyIGhheGVfVW5zZXJpYWxpemVyID0gZnVuY3Rpb24oYnVmKSB7Cgl0aGlzLmJ1ZiA9IGJ1ZjsKCXRoaXMubGVuZ3RoID0gYnVmLmxlbmd0aDsKCXRoaXMucG9zID0gMDsKCXRoaXMuc2NhY2hlID0gW107Cgl0aGlzLmNhY2hlID0gW107Cgl2YXIgciA9IGhheGVfVW5zZXJpYWxpemVyLkRFRkFVTFRfUkVTT0xWRVI7CglpZihyID09IG51bGwpIHsKCQlyID0gVHlwZTsKCQloYXhlX1Vuc2VyaWFsaXplci5ERUZBVUxUX1JFU09MVkVSID0gcjsKCX0KCXRoaXMuc2V0UmVzb2x2ZXIocik7Cn07CiRoeENsYXNzZXNbImhheGUuVW5zZXJpYWxpemVyIl0gPSBoYXhlX1Vuc2VyaWFsaXplcjsKaGF4ZV9VbnNlcmlhbGl6ZXIuX19uYW1lX18gPSBbImhheGUiLCJVbnNlcmlhbGl6ZXIiXTsKaGF4ZV9VbnNlcmlhbGl6ZXIuaW5pdENvZGVzID0gZnVuY3Rpb24oKSB7Cgl2YXIgY29kZXMgPSBbXTsKCXZhciBfZzEgPSAwOwoJdmFyIF9nID0gaGF4ZV9VbnNlcmlhbGl6ZXIuQkFTRTY0Lmxlbmd0aDsKCXdoaWxlKF9nMSA8IF9nKSB7CgkJdmFyIGkgPSBfZzErKzsKCQljb2Rlc1toYXhlX1Vuc2VyaWFsaXplci5CQVNFNjQuY2hhckNvZGVBdChpKV0gPSBpOwoJfQoJcmV0dXJuIGNvZGVzOwp9OwpoYXhlX1Vuc2VyaWFsaXplci5ydW4gPSBmdW5jdGlvbih2KSB7CglyZXR1cm4gbmV3IGhheGVfVW5zZXJpYWxpemVyKHYpLnVuc2VyaWFsaXplKCk7Cn07CmhheGVfVW5zZXJpYWxpemVyLnByb3RvdHlwZSA9IHsKCXNldFJlc29sdmVyOiBmdW5jdGlvbihyKSB7CgkJaWYociA9PSBudWxsKSB0aGlzLnJlc29sdmVyID0geyByZXNvbHZlQ2xhc3MgOiBmdW5jdGlvbihfKSB7CgkJCXJldHVybiBudWxsOwoJCX0sIHJlc29sdmVFbnVtIDogZnVuY3Rpb24oXzEpIHsKCQkJcmV0dXJuIG51bGw7CgkJfX07IGVsc2UgdGhpcy5yZXNvbHZlciA9IHI7Cgl9CgksZ2V0OiBmdW5jdGlvbihwKSB7CgkJcmV0dXJuIHRoaXMuYnVmLmNoYXJDb2RlQXQocCk7Cgl9CgkscmVhZERpZ2l0czogZnVuY3Rpb24oKSB7CgkJdmFyIGsgPSAwOwoJCXZhciBzID0gZmFsc2U7CgkJdmFyIGZwb3MgPSB0aGlzLnBvczsKCQl3aGlsZSh0cnVlKSB7CgkJCXZhciBjID0gdGhpcy5idWYuY2hhckNvZGVBdCh0aGlzLnBvcyk7CgkJCWlmKGMgIT0gYykgYnJlYWs7CgkJCWlmKGMgPT0gNDUpIHsKCQkJCWlmKHRoaXMucG9zICE9IGZwb3MpIGJyZWFrOwoJCQkJcyA9IHRydWU7CgkJCQl0aGlzLnBvcysrOwoJCQkJY29udGludWU7CgkJCX0KCQkJaWYoYyA8IDQ4IHx8IGMgPiA1NykgYnJlYWs7CgkJCWsgPSBrICogMTAgKyAoYyAtIDQ4KTsKCQkJdGhpcy5wb3MrKzsKCQl9CgkJaWYocykgayAqPSAtMTsKCQlyZXR1cm4gazsKCX0KCSxyZWFkRmxvYXQ6IGZ1bmN0aW9uKCkgewoJCXZhciBwMSA9IHRoaXMucG9zOwoJCXdoaWxlKHRydWUpIHsKCQkJdmFyIGMgPSB0aGlzLmJ1Zi5jaGFyQ29kZUF0KHRoaXMucG9zKTsKCQkJaWYoYyA%PSA0MyAmJiBjIDwgNTggfHwgYyA9PSAxMDEgfHwgYyA9PSA2OSkgdGhpcy5wb3MrKzsgZWxzZSBicmVhazsKCQl9CgkJcmV0dXJuIFN0ZC5wYXJzZUZsb2F0KEh4T3ZlcnJpZGVzLnN1YnN0cih0aGlzLmJ1ZixwMSx0aGlzLnBvcyAtIHAxKSk7Cgl9CgksdW5zZXJpYWxpemVPYmplY3Q6IGZ1bmN0aW9uKG8pIHsKCQl3aGlsZSh0cnVlKSB7CgkJCWlmKHRoaXMucG9zID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiSW52YWxpZCBvYmplY3QiKTsKCQkJaWYodGhpcy5idWYuY2hhckNvZGVBdCh0aGlzLnBvcykgPT0gMTAzKSBicmVhazsKCQkJdmFyIGsgPSB0aGlzLnVuc2VyaWFsaXplKCk7CgkJCWlmKCEodHlwZW9mKGspID09ICJzdHJpbmciKSkgdGhyb3cgbmV3IGpzX18kQm9vdF9IYXhlRXJyb3IoIkludmFsaWQgb2JqZWN0IGtleSIpOwoJCQl2YXIgdiA9IHRoaXMudW5zZXJpYWxpemUoKTsKCQkJb1trXSA9IHY7CgkJfQoJCXRoaXMucG9zKys7Cgl9CgksdW5zZXJpYWxpemVFbnVtOiBmdW5jdGlvbihlZGVjbCx0YWcpIHsKCQlpZih0aGlzLmdldCh0aGlzLnBvcysrKSAhPSA1OCkgdGhyb3cgbmV3IGpzX18kQm9vdF9IYXhlRXJyb3IoIkludmFsaWQgZW51bSBmb3JtYXQiKTsKCQl2YXIgbmFyZ3MgPSB0aGlzLnJlYWREaWdpdHMoKTsKCQlpZihuYXJncyA9PSAwKSByZXR1cm4gVHlwZS5jcmVhdGVFbnVtKGVkZWNsLHRhZyk7CgkJdmFyIGFyZ3MgPSBbXTsKCQl3aGlsZShuYXJncy0tID4gMCkgYXJncy5wdXNoKHRoaXMudW5zZXJpYWxpemUoKSk7CgkJcmV0dXJuIFR5cGUuY3JlYXRlRW51bShlZGVjbCx0YWcsYXJncyk7Cgl9CgksdW5zZXJpYWxpemU6IGZ1bmN0aW9uKCkgewoJCXZhciBfZyA9IHRoaXMuZ2V0KHRoaXMucG9zKyspOwoJCXN3aXRjaChfZykgewoJCWNhc2UgMTEwOgoJCQlyZXR1cm4gbnVsbDsKCQljYXNlIDExNjoKCQkJcmV0dXJuIHRydWU7CgkJY2FzZSAxMDI6CgkJCXJldHVybiBmYWxzZTsKCQljYXNlIDEyMjoKCQkJcmV0dXJuIDA7CgkJY2FzZSAxMDU6CgkJCXJldHVybiB0aGlzLnJlYWREaWdpdHMoKTsKCQljYXNlIDEwMDoKCQkJcmV0dXJuIHRoaXMucmVhZEZsb2F0KCk7CgkJY2FzZSAxMjE6CgkJCXZhciBsZW4gPSB0aGlzLnJlYWREaWdpdHMoKTsKCQkJaWYodGhpcy5nZXQodGhpcy5wb3MrKykgIT0gNTggfHwgdGhpcy5sZW5ndGggLSB0aGlzLnBvcyA8IGxlbikgdGhyb3cgbmV3IGpzX18kQm9vdF9IYXhlRXJyb3IoIkludmFsaWQgc3RyaW5nIGxlbmd0aCIpOwoJCQl2YXIgcyA9IEh4T3ZlcnJpZGVzLnN1YnN0cih0aGlzLmJ1Zix0aGlzLnBvcyxsZW4pOwoJCQl0aGlzLnBvcyArPSBsZW47CgkJCXMgPSBkZWNvZGVVUklDb21wb25lbnQocy5zcGxpdCgiKyIpLmpvaW4oIiAiKSk7CgkJCXRoaXMuc2NhY2hlLnB1c2gocyk7CgkJCXJldHVybiBzOwoJCWNhc2UgMTA3OgoJCQlyZXR1cm4gTmFOOwoJCWNhc2UgMTA5OgoJCQlyZXR1cm4gLUluZmluaXR5OwoJCWNhc2UgMTEyOgoJCQlyZXR1cm4gSW5maW5pdHk7CgkJY2FzZSA5NzoKCQkJdmFyIGJ1ZiA9IHRoaXMuYnVmOwoJCQl2YXIgYSA9IFtdOwoJCQl0aGlzLmNhY2hlLnB1c2goYSk7CgkJCXdoaWxlKHRydWUpIHsKCQkJCXZhciBjID0gdGhpcy5idWYuY2hhckNvZGVBdCh0aGlzLnBvcyk7CgkJCQlpZihjID09IDEwNCkgewoJCQkJCXRoaXMucG9zKys7CgkJCQkJYnJlYWs7CgkJCQl9CgkJCQlpZihjID09IDExNykgewoJCQkJCXRoaXMucG9zKys7CgkJCQkJdmFyIG4gPSB0aGlzLnJlYWREaWdpdHMoKTsKCQkJCQlhW2EubGVuZ3RoICsgbiAtIDFdID0gbnVsbDsKCQkJCX0gZWxzZSBhLnB1c2godGhpcy51bnNlcmlhbGl6ZSgpKTsKCQkJfQoJCQlyZXR1cm4gYTsKCQljYXNlIDExMToKCQkJdmFyIG8gPSB7IH07CgkJCXRoaXMuY2FjaGUucHVzaChvKTsKCQkJdGhpcy51bnNlcmlhbGl6ZU9iamVjdChvKTsKCQkJcmV0dXJuIG87CgkJY2FzZSAxMTQ6CgkJCXZhciBuMSA9IHRoaXMucmVhZERpZ2l0cygpOwoJCQlpZihuMSA8IDAgfHwgbjEgPj0gdGhpcy5jYWNoZS5sZW5ndGgpIHRocm93IG5ldyBqc19fJEJvb3RfSGF4ZUVycm9yKCJJbnZhbGlkIHJlZmVyZW5jZSIpOwoJCQlyZXR1cm4gdGhpcy5jYWNoZVtuMV07CgkJY2FzZSA4MjoKCQkJdmFyIG4yID0gdGhpcy5yZWFkRGlnaXRzKCk7CgkJCWlmKG4yIDwgMCB8fCBuMiA%PSB0aGlzLnNjYWNoZS5sZW5ndGgpIHRocm93IG5ldyBqc19fJEJvb3RfSGF4ZUVycm9yKCJJbnZhbGlkIHN0cmluZyByZWZlcmVuY2UiKTsKCQkJcmV0dXJuIHRoaXMuc2NhY2hlW24yXTsKCQljYXNlIDEyMDoKCQkJdGhyb3cgbmV3IGpzX18kQm9vdF9IYXhlRXJyb3IodGhpcy51bnNlcmlhbGl6ZSgpKTsKCQkJYnJlYWs7CgkJY2FzZSA5OToKCQkJdmFyIG5hbWUgPSB0aGlzLnVuc2VyaWFsaXplKCk7CgkJCXZhciBjbCA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNsYXNzKG5hbWUpOwoJCQlpZihjbCA9PSBudWxsKSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiQ2xhc3Mgbm90IGZvdW5kICIgKyBuYW1lKTsKCQkJdmFyIG8xID0gVHlwZS5jcmVhdGVFbXB0eUluc3RhbmNlKGNsKTsKCQkJdGhpcy5jYWNoZS5wdXNoKG8xKTsKCQkJdGhpcy51bnNlcmlhbGl6ZU9iamVjdChvMSk7CgkJCXJldHVybiBvMTsKCQljYXNlIDExOToKCQkJdmFyIG5hbWUxID0gdGhpcy51bnNlcmlhbGl6ZSgpOwoJCQl2YXIgZWRlY2wgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVFbnVtKG5hbWUxKTsKCQkJaWYoZWRlY2wgPT0gbnVsbCkgdGhyb3cgbmV3IGpzX18kQm9vdF9IYXhlRXJyb3IoIkVudW0gbm90IGZvdW5kICIgKyBuYW1lMSk7CgkJCXZhciBlID0gdGhpcy51bnNlcmlhbGl6ZUVudW0oZWRlY2wsdGhpcy51bnNlcmlhbGl6ZSgpKTsKCQkJdGhpcy5jYWNoZS5wdXNoKGUpOwoJCQlyZXR1cm4gZTsKCQljYXNlIDEwNjoKCQkJdmFyIG5hbWUyID0gdGhpcy51bnNlcmlhbGl6ZSgpOwoJCQl2YXIgZWRlY2wxID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlRW51bShuYW1lMik7CgkJCWlmKGVkZWNsMSA9PSBudWxsKSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiRW51bSBub3QgZm91bmQgIiArIG5hbWUyKTsKCQkJdGhpcy5wb3MrKzsKCQkJdmFyIGluZGV4ID0gdGhpcy5yZWFkRGlnaXRzKCk7CgkJCXZhciB0YWcgPSBUeXBlLmdldEVudW1Db25zdHJ1Y3RzKGVkZWNsMSlbaW5kZXhdOwoJCQlpZih0YWcgPT0gbnVsbCkgdGhyb3cgbmV3IGpzX18kQm9vdF9IYXhlRXJyb3IoIlVua25vd24gZW51bSBpbmRleCAiICsgbmFtZTIgKyAiQCIgKyBpbmRleCk7CgkJCXZhciBlMSA9IHRoaXMudW5zZXJpYWxpemVFbnVtKGVkZWNsMSx0YWcpOwoJCQl0aGlzLmNhY2hlLnB1c2goZTEpOwoJCQlyZXR1cm4gZTE7CgkJY2FzZSAxMDg6CgkJCXZhciBsID0gbmV3IExpc3QoKTsKCQkJdGhpcy5jYWNoZS5wdXNoKGwpOwoJCQl2YXIgYnVmMSA9IHRoaXMuYnVmOwoJCQl3aGlsZSh0aGlzLmJ1Zi5jaGFyQ29kZUF0KHRoaXMucG9zKSAhPSAxMDQpIGwuYWRkKHRoaXMudW5zZXJpYWxpemUoKSk7CgkJCXRoaXMucG9zKys7CgkJCXJldHVybiBsOwoJCWNhc2UgOTg6CgkJCXZhciBoID0gbmV3IGhheGVfZHNfU3RyaW5nTWFwKCk7CgkJCXRoaXMuY2FjaGUucHVzaChoKTsKCQkJdmFyIGJ1ZjIgPSB0aGlzLmJ1ZjsKCQkJd2hpbGUodGhpcy5idWYuY2hhckNvZGVBdCh0aGlzLnBvcykgIT0gMTA0KSB7CgkJCQl2YXIgczEgPSB0aGlzLnVuc2VyaWFsaXplKCk7CgkJCQloLnNldChzMSx0aGlzLnVuc2VyaWFsaXplKCkpOwoJCQl9CgkJCXRoaXMucG9zKys7CgkJCXJldHVybiBoOwoJCWNhc2UgMTEzOgoJCQl2YXIgaDEgPSBuZXcgaGF4ZV9kc19JbnRNYXAoKTsKCQkJdGhpcy5jYWNoZS5wdXNoKGgxKTsKCQkJdmFyIGJ1ZjMgPSB0aGlzLmJ1ZjsKCQkJdmFyIGMxID0gdGhpcy5nZXQodGhpcy5wb3MrKyk7CgkJCXdoaWxlKGMxID09IDU4KSB7CgkJCQl2YXIgaSA9IHRoaXMucmVhZERpZ2l0cygpOwoJCQkJaDEuc2V0KGksdGhpcy51bnNlcmlhbGl6ZSgpKTsKCQkJCWMxID0gdGhpcy5nZXQodGhpcy5wb3MrKyk7CgkJCX0KCQkJaWYoYzEgIT0gMTA0KSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiSW52YWxpZCBJbnRNYXAgZm9ybWF0Iik7CgkJCXJldHVybiBoMTsKCQljYXNlIDc3OgoJCQl2YXIgaDIgPSBuZXcgaGF4ZV9kc19PYmplY3RNYXAoKTsKCQkJdGhpcy5jYWNoZS5wdXNoKGgyKTsKCQkJdmFyIGJ1ZjQgPSB0aGlzLmJ1ZjsKCQkJd2hpbGUodGhpcy5idWYuY2hhckNvZGVBdCh0aGlzLnBvcykgIT0gMTA0KSB7CgkJCQl2YXIgczIgPSB0aGlzLnVuc2VyaWFsaXplKCk7CgkJCQloMi5zZXQoczIsdGhpcy51bnNlcmlhbGl6ZSgpKTsKCQkJfQoJCQl0aGlzLnBvcysrOwoJCQlyZXR1cm4gaDI7CgkJY2FzZSAxMTg6CgkJCXZhciBkOwoJCQlpZih0aGlzLmJ1Zi5jaGFyQ29kZUF0KHRoaXMucG9zKSA%PSA0OCAmJiB0aGlzLmJ1Zi5jaGFyQ29kZUF0KHRoaXMucG9zKSA8PSA1NyAmJiB0aGlzLmJ1Zi5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSkgPj0gNDggJiYgdGhpcy5idWYuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpIDw9IDU3ICYmIHRoaXMuYnVmLmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKSA%PSA0OCAmJiB0aGlzLmJ1Zi5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPD0gNTcgJiYgdGhpcy5idWYuY2hhckNvZGVBdCh0aGlzLnBvcyArIDMpID49IDQ4ICYmIHRoaXMuYnVmLmNoYXJDb2RlQXQodGhpcy5wb3MgKyAzKSA8PSA1NyAmJiB0aGlzLmJ1Zi5jaGFyQ29kZUF0KHRoaXMucG9zICsgNCkgPT0gNDUpIHsKCQkJCXZhciBzMyA9IEh4T3ZlcnJpZGVzLnN1YnN0cih0aGlzLmJ1Zix0aGlzLnBvcywxOSk7CgkJCQlkID0gSHhPdmVycmlkZXMuc3RyRGF0ZShzMyk7CgkJCQl0aGlzLnBvcyArPSAxOTsKCQkJfSBlbHNlIHsKCQkJCXZhciB0ID0gdGhpcy5yZWFkRmxvYXQoKTsKCQkJCXZhciBkMSA9IG5ldyBEYXRlKCk7CgkJCQlkMS5zZXRUaW1lKHQpOwoJCQkJZCA9IGQxOwoJCQl9CgkJCXRoaXMuY2FjaGUucHVzaChkKTsKCQkJcmV0dXJuIGQ7CgkJY2FzZSAxMTU6CgkJCXZhciBsZW4xID0gdGhpcy5yZWFkRGlnaXRzKCk7CgkJCXZhciBidWY1ID0gdGhpcy5idWY7CgkJCWlmKHRoaXMuZ2V0KHRoaXMucG9zKyspICE9IDU4IHx8IHRoaXMubGVuZ3RoIC0gdGhpcy5wb3MgPCBsZW4xKSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiSW52YWxpZCBieXRlcyBsZW5ndGgiKTsKCQkJdmFyIGNvZGVzID0gaGF4ZV9VbnNlcmlhbGl6ZXIuQ09ERVM7CgkJCWlmKGNvZGVzID09IG51bGwpIHsKCQkJCWNvZGVzID0gaGF4ZV9VbnNlcmlhbGl6ZXIuaW5pdENvZGVzKCk7CgkJCQloYXhlX1Vuc2VyaWFsaXplci5DT0RFUyA9IGNvZGVzOwoJCQl9CgkJCXZhciBpMSA9IHRoaXMucG9zOwoJCQl2YXIgcmVzdCA9IGxlbjEgJiAzOwoJCQl2YXIgc2l6ZTsKCQkJc2l6ZSA9IChsZW4xID4%IDIpICogMyArIChyZXN0ID49IDI:cmVzdCAtIDE6MCk7CgkJCXZhciBtYXggPSBpMSArIChsZW4xIC0gcmVzdCk7CgkJCXZhciBieXRlcyA9IGhheGVfaW9fQnl0ZXMuYWxsb2Moc2l6ZSk7CgkJCXZhciBicG9zID0gMDsKCQkJd2hpbGUoaTEgPCBtYXgpIHsKCQkJCXZhciBjMTEgPSBjb2Rlc1tTdHJpbmdUb29scy5mYXN0Q29kZUF0KGJ1ZjUsaTErKyldOwoJCQkJdmFyIGMyID0gY29kZXNbU3RyaW5nVG9vbHMuZmFzdENvZGVBdChidWY1LGkxKyspXTsKCQkJCWJ5dGVzLnNldChicG9zKyssYzExIDw8IDIgfCBjMiA%PiA0KTsKCQkJCXZhciBjMyA9IGNvZGVzW1N0cmluZ1Rvb2xzLmZhc3RDb2RlQXQoYnVmNSxpMSsrKV07CgkJCQlieXRlcy5zZXQoYnBvcysrLGMyIDw8IDQgfCBjMyA%PiAyKTsKCQkJCXZhciBjNCA9IGNvZGVzW1N0cmluZ1Rvb2xzLmZhc3RDb2RlQXQoYnVmNSxpMSsrKV07CgkJCQlieXRlcy5zZXQoYnBvcysrLGMzIDw8IDYgfCBjNCk7CgkJCX0KCQkJaWYocmVzdCA%PSAyKSB7CgkJCQl2YXIgYzEyID0gY29kZXNbU3RyaW5nVG9vbHMuZmFzdENvZGVBdChidWY1LGkxKyspXTsKCQkJCXZhciBjMjEgPSBjb2Rlc1tTdHJpbmdUb29scy5mYXN0Q29kZUF0KGJ1ZjUsaTErKyldOwoJCQkJYnl0ZXMuc2V0KGJwb3MrKyxjMTIgPDwgMiB8IGMyMSA%PiA0KTsKCQkJCWlmKHJlc3QgPT0gMykgewoJCQkJCXZhciBjMzEgPSBjb2Rlc1tTdHJpbmdUb29scy5mYXN0Q29kZUF0KGJ1ZjUsaTErKyldOwoJCQkJCWJ5dGVzLnNldChicG9zKyssYzIxIDw8IDQgfCBjMzEgPj4gMik7CgkJCQl9CgkJCX0KCQkJdGhpcy5wb3MgKz0gbGVuMTsKCQkJdGhpcy5jYWNoZS5wdXNoKGJ5dGVzKTsKCQkJcmV0dXJuIGJ5dGVzOwoJCWNhc2UgNjc6CgkJCXZhciBuYW1lMyA9IHRoaXMudW5zZXJpYWxpemUoKTsKCQkJdmFyIGNsMSA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNsYXNzKG5hbWUzKTsKCQkJaWYoY2wxID09IG51bGwpIHRocm93IG5ldyBqc19fJEJvb3RfSGF4ZUVycm9yKCJDbGFzcyBub3QgZm91bmQgIiArIG5hbWUzKTsKCQkJdmFyIG8yID0gVHlwZS5jcmVhdGVFbXB0eUluc3RhbmNlKGNsMSk7CgkJCXRoaXMuY2FjaGUucHVzaChvMik7CgkJCW8yLmh4VW5zZXJpYWxpemUodGhpcyk7CgkJCWlmKHRoaXMuZ2V0KHRoaXMucG9zKyspICE9IDEwMykgdGhyb3cgbmV3IGpzX18kQm9vdF9IYXhlRXJyb3IoIkludmFsaWQgY3VzdG9tIGRhdGEiKTsKCQkJcmV0dXJuIG8yOwoJCWNhc2UgNjU6CgkJCXZhciBuYW1lNCA9IHRoaXMudW5zZXJpYWxpemUoKTsKCQkJdmFyIGNsMiA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNsYXNzKG5hbWU0KTsKCQkJaWYoY2wyID09IG51bGwpIHRocm93IG5ldyBqc19fJEJvb3RfSGF4ZUVycm9yKCJDbGFzcyBub3QgZm91bmQgIiArIG5hbWU0KTsKCQkJcmV0dXJuIGNsMjsKCQljYXNlIDY2OgoJCQl2YXIgbmFtZTUgPSB0aGlzLnVuc2VyaWFsaXplKCk7CgkJCXZhciBlMiA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUVudW0obmFtZTUpOwoJCQlpZihlMiA9PSBudWxsKSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiRW51bSBub3QgZm91bmQgIiArIG5hbWU1KTsKCQkJcmV0dXJuIGUyOwoJCWRlZmF1bHQ6CgkJfQoJCXRoaXMucG9zLS07CgkJdGhyb3cgbmV3IGpzX18kQm9vdF9IYXhlRXJyb3IoIkludmFsaWQgY2hhciAiICsgdGhpcy5idWYuY2hhckF0KHRoaXMucG9zKSArICIgYXQgcG9zaXRpb24gIiArIHRoaXMucG9zKTsKCX0KCSxfX2NsYXNzX186IGhheGVfVW5zZXJpYWxpemVyCn07CnZhciBoYXhlX2lvX0J5dGVzID0gZnVuY3Rpb24oZGF0YSkgewoJdGhpcy5sZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7Cgl0aGlzLmIgPSBuZXcgVWludDhBcnJheShkYXRhKTsKCWRhdGEuaHhCeXRlcyA9IHRoaXM7CglkYXRhLmJ5dGVzID0gdGhpcy5iOwp9OwokaHhDbGFzc2VzWyJoYXhlLmlvLkJ5dGVzIl0gPSBoYXhlX2lvX0J5dGVzOwpoYXhlX2lvX0J5dGVzLl9fbmFtZV9fID0gWyJoYXhlIiwiaW8iLCJCeXRlcyJdOwpoYXhlX2lvX0J5dGVzLmFsbG9jID0gZnVuY3Rpb24obGVuZ3RoKSB7CglyZXR1cm4gbmV3IGhheGVfaW9fQnl0ZXMobmV3IEFycmF5QnVmZmVyKGxlbmd0aCkpOwp9OwpoYXhlX2lvX0J5dGVzLm9mU3RyaW5nID0gZnVuY3Rpb24ocykgewoJdmFyIGEgPSBbXTsKCXZhciBpID0gMDsKCXdoaWxlKGkgPCBzLmxlbmd0aCkgewoJCXZhciBjID0gU3RyaW5nVG9vbHMuZmFzdENvZGVBdChzLGkrKyk7CgkJaWYoNTUyOTYgPD0gYyAmJiBjIDw9IDU2MzE5KSBjID0gYyAtIDU1MjMyIDw8IDEwIHwgU3RyaW5nVG9vbHMuZmFzdENvZGVBdChzLGkrKykgJiAxMDIzOwoJCWlmKGMgPD0gMTI3KSBhLnB1c2goYyk7IGVsc2UgaWYoYyA8PSAyMDQ3KSB7CgkJCWEucHVzaCgxOTIgfCBjID4%IDYpOwoJCQlhLnB1c2goMTI4IHwgYyAmIDYzKTsKCQl9IGVsc2UgaWYoYyA8PSA2NTUzNSkgewoJCQlhLnB1c2goMjI0IHwgYyA%PiAxMik7CgkJCWEucHVzaCgxMjggfCBjID4%IDYgJiA2Myk7CgkJCWEucHVzaCgxMjggfCBjICYgNjMpOwoJCX0gZWxzZSB7CgkJCWEucHVzaCgyNDAgfCBjID4%IDE4KTsKCQkJYS5wdXNoKDEyOCB8IGMgPj4gMTIgJiA2Myk7CgkJCWEucHVzaCgxMjggfCBjID4%IDYgJiA2Myk7CgkJCWEucHVzaCgxMjggfCBjICYgNjMpOwoJCX0KCX0KCXJldHVybiBuZXcgaGF4ZV9pb19CeXRlcyhuZXcgVWludDhBcnJheShhKS5idWZmZXIpOwp9OwpoYXhlX2lvX0J5dGVzLnByb3RvdHlwZSA9IHsKCWdldDogZnVuY3Rpb24ocG9zKSB7CgkJcmV0dXJuIHRoaXMuYltwb3NdOwoJfQoJLHNldDogZnVuY3Rpb24ocG9zLHYpIHsKCQl0aGlzLmJbcG9zXSA9IHYgJiAyNTU7Cgl9CgksZ2V0U3RyaW5nOiBmdW5jdGlvbihwb3MsbGVuKSB7CgkJaWYocG9zIDwgMCB8fCBsZW4gPCAwIHx8IHBvcyArIGxlbiA%IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcihoYXhlX2lvX0Vycm9yLk91dHNpZGVCb3VuZHMpOwoJCXZhciBzID0gIiI7CgkJdmFyIGIgPSB0aGlzLmI7CgkJdmFyIGZjYyA9IFN0cmluZy5mcm9tQ2hhckNvZGU7CgkJdmFyIGkgPSBwb3M7CgkJdmFyIG1heCA9IHBvcyArIGxlbjsKCQl3aGlsZShpIDwgbWF4KSB7CgkJCXZhciBjID0gYltpKytdOwoJCQlpZihjIDwgMTI4KSB7CgkJCQlpZihjID09IDApIGJyZWFrOwoJCQkJcyArPSBmY2MoYyk7CgkJCX0gZWxzZSBpZihjIDwgMjI0KSBzICs9IGZjYygoYyAmIDYzKSA8PCA2IHwgYltpKytdICYgMTI3KTsgZWxzZSBpZihjIDwgMjQwKSB7CgkJCQl2YXIgYzIgPSBiW2krK107CgkJCQlzICs9IGZjYygoYyAmIDMxKSA8PCAxMiB8IChjMiAmIDEyNykgPDwgNiB8IGJbaSsrXSAmIDEyNyk7CgkJCX0gZWxzZSB7CgkJCQl2YXIgYzIxID0gYltpKytdOwoJCQkJdmFyIGMzID0gYltpKytdOwoJCQkJdmFyIHUgPSAoYyAmIDE1KSA8PCAxOCB8IChjMjEgJiAxMjcpIDw8IDEyIHwgKGMzICYgMTI3KSA8PCA2IHwgYltpKytdICYgMTI3OwoJCQkJcyArPSBmY2MoKHUgPj4gMTApICsgNTUyMzIpOwoJCQkJcyArPSBmY2ModSAmIDEwMjMgfCA1NjMyMCk7CgkJCX0KCQl9CgkJcmV0dXJuIHM7Cgl9CgksdG9TdHJpbmc6IGZ1bmN0aW9uKCkgewoJCXJldHVybiB0aGlzLmdldFN0cmluZygwLHRoaXMubGVuZ3RoKTsKCX0KCSxfX2NsYXNzX186IGhheGVfaW9fQnl0ZXMKfTsKdmFyIGhheGVfY3J5cHRvX0Jhc2U2NCA9IGZ1bmN0aW9uKCkgeyB9OwokaHhDbGFzc2VzWyJoYXhlLmNyeXB0by5CYXNlNjQiXSA9IGhheGVfY3J5cHRvX0Jhc2U2NDsKaGF4ZV9jcnlwdG9fQmFzZTY0Ll9fbmFtZV9fID0gWyJoYXhlIiwiY3J5cHRvIiwiQmFzZTY0Il07CmhheGVfY3J5cHRvX0Jhc2U2NC5lbmNvZGUgPSBmdW5jdGlvbihieXRlcyxjb21wbGVtZW50KSB7CglpZihjb21wbGVtZW50ID09IG51bGwpIGNvbXBsZW1lbnQgPSB0cnVlOwoJdmFyIHN0ciA9IG5ldyBoYXhlX2NyeXB0b19CYXNlQ29kZShoYXhlX2NyeXB0b19CYXNlNjQuQllURVMpLmVuY29kZUJ5dGVzKGJ5dGVzKS50b1N0cmluZygpOwoJaWYoY29tcGxlbWVudCkgewoJCXZhciBfZyA9IGJ5dGVzLmxlbmd0aCAlIDM7CgkJc3dpdGNoKF9nKSB7CgkJY2FzZSAxOgoJCQlzdHIgKz0gIj09IjsKCQkJYnJlYWs7CgkJY2FzZSAyOgoJCQlzdHIgKz0gIj0iOwoJCQlicmVhazsKCQlkZWZhdWx0OgoJCX0KCX0KCXJldHVybiBzdHI7Cn07CmhheGVfY3J5cHRvX0Jhc2U2NC5kZWNvZGUgPSBmdW5jdGlvbihzdHIsY29tcGxlbWVudCkgewoJaWYoY29tcGxlbWVudCA9PSBudWxsKSBjb21wbGVtZW50ID0gdHJ1ZTsKCWlmKGNvbXBsZW1lbnQpIHdoaWxlKEh4T3ZlcnJpZGVzLmNjYShzdHIsc3RyLmxlbmd0aCAtIDEpID09IDYxKSBzdHIgPSBIeE92ZXJyaWRlcy5zdWJzdHIoc3RyLDAsLTEpOwoJcmV0dXJuIG5ldyBoYXhlX2NyeXB0b19CYXNlQ29kZShoYXhlX2NyeXB0b19CYXNlNjQuQllURVMpLmRlY29kZUJ5dGVzKGhheGVfaW9fQnl0ZXMub2ZTdHJpbmcoc3RyKSk7Cn07CnZhciBoYXhlX2NyeXB0b19CYXNlQ29kZSA9IGZ1bmN0aW9uKGJhc2UpIHsKCXZhciBsZW4gPSBiYXNlLmxlbmd0aDsKCXZhciBuYml0cyA9IDE7Cgl3aGlsZShsZW4gPiAxIDw8IG5iaXRzKSBuYml0cysrOwoJaWYobmJpdHMgPiA4IHx8IGxlbiAhPSAxIDw8IG5iaXRzKSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiQmFzZUNvZGUgOiBiYXNlIGxlbmd0aCBtdXN0IGJlIGEgcG93ZXIgb2YgdHdvLiIpOwoJdGhpcy5iYXNlID0gYmFzZTsKCXRoaXMubmJpdHMgPSBuYml0czsKfTsKJGh4Q2xhc3Nlc1siaGF4ZS5jcnlwdG8uQmFzZUNvZGUiXSA9IGhheGVfY3J5cHRvX0Jhc2VDb2RlOwpoYXhlX2NyeXB0b19CYXNlQ29kZS5fX25hbWVfXyA9IFsiaGF4ZSIsImNyeXB0byIsIkJhc2VDb2RlIl07CmhheGVfY3J5cHRvX0Jhc2VDb2RlLnByb3RvdHlwZSA9IHsKCWVuY29kZUJ5dGVzOiBmdW5jdGlvbihiKSB7CgkJdmFyIG5iaXRzID0gdGhpcy5uYml0czsKCQl2YXIgYmFzZSA9IHRoaXMuYmFzZTsKCQl2YXIgc2l6ZSA9IGIubGVuZ3RoICogOCAvIG5iaXRzIHwgMDsKCQl2YXIgb3V0ID0gaGF4ZV9pb19CeXRlcy5hbGxvYyhzaXplICsgKGIubGVuZ3RoICogOCAlIG5iaXRzID09IDA:MDoxKSk7CgkJdmFyIGJ1ZiA9IDA7CgkJdmFyIGN1cmJpdHMgPSAwOwoJCXZhciBtYXNrID0gKDEgPDwgbmJpdHMpIC0gMTsKCQl2YXIgcGluID0gMDsKCQl2YXIgcG91dCA9IDA7CgkJd2hpbGUocG91dCA8IHNpemUpIHsKCQkJd2hpbGUoY3VyYml0cyA8IG5iaXRzKSB7CgkJCQljdXJiaXRzICs9IDg7CgkJCQlidWYgPDw9IDg7CgkJCQlidWYgfD0gYi5nZXQocGluKyspOwoJCQl9CgkJCWN1cmJpdHMgLT0gbmJpdHM7CgkJCW91dC5zZXQocG91dCsrLGJhc2UuYltidWYgPj4gY3VyYml0cyAmIG1hc2tdKTsKCQl9CgkJaWYoY3VyYml0cyA%IDApIG91dC5zZXQocG91dCsrLGJhc2UuYltidWYgPDwgbmJpdHMgLSBjdXJiaXRzICYgbWFza10pOwoJCXJldHVybiBvdXQ7Cgl9CgksaW5pdFRhYmxlOiBmdW5jdGlvbigpIHsKCQl2YXIgdGJsID0gW107CgkJdmFyIF9nID0gMDsKCQl3aGlsZShfZyA8IDI1NikgewoJCQl2YXIgaSA9IF9nKys7CgkJCXRibFtpXSA9IC0xOwoJCX0KCQl2YXIgX2cxID0gMDsKCQl2YXIgX2cyID0gdGhpcy5iYXNlLmxlbmd0aDsKCQl3aGlsZShfZzEgPCBfZzIpIHsKCQkJdmFyIGkxID0gX2cxKys7CgkJCXRibFt0aGlzLmJhc2UuYltpMV1dID0gaTE7CgkJfQoJCXRoaXMudGJsID0gdGJsOwoJfQoJLGRlY29kZUJ5dGVzOiBmdW5jdGlvbihiKSB7CgkJdmFyIG5iaXRzID0gdGhpcy5uYml0czsKCQl2YXIgYmFzZSA9IHRoaXMuYmFzZTsKCQlpZih0aGlzLnRibCA9PSBudWxsKSB0aGlzLmluaXRUYWJsZSgpOwoJCXZhciB0YmwgPSB0aGlzLnRibDsKCQl2YXIgc2l6ZSA9IGIubGVuZ3RoICogbmJpdHMgPj4gMzsKCQl2YXIgb3V0ID0gaGF4ZV9pb19CeXRlcy5hbGxvYyhzaXplKTsKCQl2YXIgYnVmID0gMDsKCQl2YXIgY3VyYml0cyA9IDA7CgkJdmFyIHBpbiA9IDA7CgkJdmFyIHBvdXQgPSAwOwoJCXdoaWxlKHBvdXQgPCBzaXplKSB7CgkJCXdoaWxlKGN1cmJpdHMgPCA4KSB7CgkJCQljdXJiaXRzICs9IG5iaXRzOwoJCQkJYnVmIDw8PSBuYml0czsKCQkJCXZhciBpID0gdGJsW2IuZ2V0KHBpbisrKV07CgkJCQlpZihpID09IC0xKSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiQmFzZUNvZGUgOiBpbnZhbGlkIGVuY29kZWQgY2hhciIpOwoJCQkJYnVmIHw9IGk7CgkJCX0KCQkJY3VyYml0cyAtPSA4OwoJCQlvdXQuc2V0KHBvdXQrKyxidWYgPj4gY3VyYml0cyAmIDI1NSk7CgkJfQoJCXJldHVybiBvdXQ7Cgl9CgksX19jbGFzc19fOiBoYXhlX2NyeXB0b19CYXNlQ29kZQp9Owp2YXIgaGF4ZV9kc19JbnRNYXAgPSBmdW5jdGlvbigpIHsKCXRoaXMuaCA9IHsgfTsKfTsKJGh4Q2xhc3Nlc1siaGF4ZS5kcy5JbnRNYXAiXSA9IGhheGVfZHNfSW50TWFwOwpoYXhlX2RzX0ludE1hcC5fX25hbWVfXyA9IFsiaGF4ZSIsImRzIiwiSW50TWFwIl07CmhheGVfZHNfSW50TWFwLl9faW50ZXJmYWNlc19fID0gW2hheGVfSU1hcF07CmhheGVfZHNfSW50TWFwLnByb3RvdHlwZSA9IHsKCXNldDogZnVuY3Rpb24oa2V5LHZhbHVlKSB7CgkJdGhpcy5oW2tleV0gPSB2YWx1ZTsKCX0KCSxrZXlzOiBmdW5jdGlvbigpIHsKCQl2YXIgYSA9IFtdOwoJCWZvciggdmFyIGtleSBpbiB0aGlzLmggKSB7CgkJaWYodGhpcy5oLmhhc093blByb3BlcnR5KGtleSkpIGEucHVzaChrZXkgfCAwKTsKCQl9CgkJcmV0dXJuIEh4T3ZlcnJpZGVzLml0ZXIoYSk7Cgl9CgksX19jbGFzc19fOiBoYXhlX2RzX0ludE1hcAp9Owp2YXIgaGF4ZV9kc19PYmplY3RNYXAgPSBmdW5jdGlvbigpIHsKCXRoaXMuaCA9IHsgfTsKCXRoaXMuaC5fX2tleXNfXyA9IHsgfTsKfTsKJGh4Q2xhc3Nlc1siaGF4ZS5kcy5PYmplY3RNYXAiXSA9IGhheGVfZHNfT2JqZWN0TWFwOwpoYXhlX2RzX09iamVjdE1hcC5fX25hbWVfXyA9IFsiaGF4ZSIsImRzIiwiT2JqZWN0TWFwIl07CmhheGVfZHNfT2JqZWN0TWFwLl9faW50ZXJmYWNlc19fID0gW2hheGVfSU1hcF07CmhheGVfZHNfT2JqZWN0TWFwLnByb3RvdHlwZSA9IHsKCXNldDogZnVuY3Rpb24oa2V5LHZhbHVlKSB7CgkJdmFyIGlkID0ga2V5Ll9faWRfXyB8fCAoa2V5Ll9faWRfXyA9ICsraGF4ZV9kc19PYmplY3RNYXAuY291bnQpOwoJCXRoaXMuaFtpZF0gPSB2YWx1ZTsKCQl0aGlzLmguX19rZXlzX19baWRdID0ga2V5OwoJfQoJLGtleXM6IGZ1bmN0aW9uKCkgewoJCXZhciBhID0gW107CgkJZm9yKCB2YXIga2V5IGluIHRoaXMuaC5fX2tleXNfXyApIHsKCQlpZih0aGlzLmguaGFzT3duUHJvcGVydHkoa2V5KSkgYS5wdXNoKHRoaXMuaC5fX2tleXNfX1trZXldKTsKCQl9CgkJcmV0dXJuIEh4T3ZlcnJpZGVzLml0ZXIoYSk7Cgl9CgksX19jbGFzc19fOiBoYXhlX2RzX09iamVjdE1hcAp9Owp2YXIgaGF4ZV9kc19TdHJpbmdNYXAgPSBmdW5jdGlvbigpIHsKCXRoaXMuaCA9IHsgfTsKfTsKJGh4Q2xhc3Nlc1siaGF4ZS5kcy5TdHJpbmdNYXAiXSA9IGhheGVfZHNfU3RyaW5nTWFwOwpoYXhlX2RzX1N0cmluZ01hcC5fX25hbWVfXyA9IFsiaGF4ZSIsImRzIiwiU3RyaW5nTWFwIl07CmhheGVfZHNfU3RyaW5nTWFwLl9faW50ZXJmYWNlc19fID0gW2hheGVfSU1hcF07CmhheGVfZHNfU3RyaW5nTWFwLnByb3RvdHlwZSA9IHsKCXNldDogZnVuY3Rpb24oa2V5LHZhbHVlKSB7CgkJaWYoX19tYXBfcmVzZXJ2ZWRba2V5XSAhPSBudWxsKSB0aGlzLnNldFJlc2VydmVkKGtleSx2YWx1ZSk7IGVsc2UgdGhpcy5oW2tleV0gPSB2YWx1ZTsKCX0KCSxnZXQ6IGZ1bmN0aW9uKGtleSkgewoJCWlmKF9fbWFwX3Jlc2VydmVkW2tleV0gIT0gbnVsbCkgcmV0dXJuIHRoaXMuZ2V0UmVzZXJ2ZWQoa2V5KTsKCQlyZXR1cm4gdGhpcy5oW2tleV07Cgl9Cgksc2V0UmVzZXJ2ZWQ6IGZ1bmN0aW9uKGtleSx2YWx1ZSkgewoJCWlmKHRoaXMucmggPT0gbnVsbCkgdGhpcy5yaCA9IHsgfTsKCQl0aGlzLnJoWyIkIiArIGtleV0gPSB2YWx1ZTsKCX0KCSxnZXRSZXNlcnZlZDogZnVuY3Rpb24oa2V5KSB7CgkJaWYodGhpcy5yaCA9PSBudWxsKSByZXR1cm4gbnVsbDsgZWxzZSByZXR1cm4gdGhpcy5yaFsiJCIgKyBrZXldOwoJfQoJLGtleXM6IGZ1bmN0aW9uKCkgewoJCXZhciBfdGhpcyA9IHRoaXMuYXJyYXlLZXlzKCk7CgkJcmV0dXJuIEh4T3ZlcnJpZGVzLml0ZXIoX3RoaXMpOwoJfQoJLGFycmF5S2V5czogZnVuY3Rpb24oKSB7CgkJdmFyIG91dCA9IFtdOwoJCWZvciggdmFyIGtleSBpbiB0aGlzLmggKSB7CgkJaWYodGhpcy5oLmhhc093blByb3BlcnR5KGtleSkpIG91dC5wdXNoKGtleSk7CgkJfQoJCWlmKHRoaXMucmggIT0gbnVsbCkgewoJCQlmb3IoIHZhciBrZXkgaW4gdGhpcy5yaCApIHsKCQkJaWYoa2V5LmNoYXJDb2RlQXQoMCkgPT0gMzYpIG91dC5wdXNoKGtleS5zdWJzdHIoMSkpOwoJCQl9CgkJfQoJCXJldHVybiBvdXQ7Cgl9CgksX19jbGFzc19fOiBoYXhlX2RzX1N0cmluZ01hcAp9Owp2YXIgaGF4ZV9pb19FcnJvciA9ICRoeENsYXNzZXNbImhheGUuaW8uRXJyb3IiXSA9IHsgX19lbmFtZV9fIDogWyJoYXhlIiwiaW8iLCJFcnJvciJdLCBfX2NvbnN0cnVjdHNfXyA6IFsiQmxvY2tlZCIsIk92ZXJmbG93IiwiT3V0c2lkZUJvdW5kcyIsIkN1c3RvbSJdIH07CmhheGVfaW9fRXJyb3IuQmxvY2tlZCA9IFsiQmxvY2tlZCIsMF07CmhheGVfaW9fRXJyb3IuQmxvY2tlZC5fX2VudW1fXyA9IGhheGVfaW9fRXJyb3I7CmhheGVfaW9fRXJyb3IuT3ZlcmZsb3cgPSBbIk92ZXJmbG93IiwxXTsKaGF4ZV9pb19FcnJvci5PdmVyZmxvdy5fX2VudW1fXyA9IGhheGVfaW9fRXJyb3I7CmhheGVfaW9fRXJyb3IuT3V0c2lkZUJvdW5kcyA9IFsiT3V0c2lkZUJvdW5kcyIsMl07CmhheGVfaW9fRXJyb3IuT3V0c2lkZUJvdW5kcy5fX2VudW1fXyA9IGhheGVfaW9fRXJyb3I7CmhheGVfaW9fRXJyb3IuQ3VzdG9tID0gZnVuY3Rpb24oZSkgeyB2YXIgJHggPSBbIkN1c3RvbSIsMyxlXTsgJHguX19lbnVtX18gPSBoYXhlX2lvX0Vycm9yOyByZXR1cm4gJHg7IH07CnZhciBoYXhlX2lvX0ZQSGVscGVyID0gZnVuY3Rpb24oKSB7IH07CiRoeENsYXNzZXNbImhheGUuaW8uRlBIZWxwZXIiXSA9IGhheGVfaW9fRlBIZWxwZXI7CmhheGVfaW9fRlBIZWxwZXIuX19uYW1lX18gPSBbImhheGUiLCJpbyIsIkZQSGVscGVyIl07CmhheGVfaW9fRlBIZWxwZXIuaTMyVG9GbG9hdCA9IGZ1bmN0aW9uKGkpIHsKCXZhciBzaWduID0gMSAtIChpID4%PiAzMSA8PCAxKTsKCXZhciBleHAgPSBpID4%PiAyMyAmIDI1NTsKCXZhciBzaWcgPSBpICYgODM4ODYwNzsKCWlmKHNpZyA9PSAwICYmIGV4cCA9PSAwKSByZXR1cm4gMC4wOwoJcmV0dXJuIHNpZ24gKiAoMSArIE1hdGgucG93KDIsLTIzKSAqIHNpZykgKiBNYXRoLnBvdygyLGV4cCAtIDEyNyk7Cn07CmhheGVfaW9fRlBIZWxwZXIuZmxvYXRUb0kzMiA9IGZ1bmN0aW9uKGYpIHsKCWlmKGYgPT0gMCkgcmV0dXJuIDA7Cgl2YXIgYWY7CglpZihmIDwgMCkgYWYgPSAtZjsgZWxzZSBhZiA9IGY7Cgl2YXIgZXhwID0gTWF0aC5mbG9vcihNYXRoLmxvZyhhZikgLyAwLjY5MzE0NzE4MDU1OTk0NTMpOwoJaWYoZXhwIDwgLTEyNykgZXhwID0gLTEyNzsgZWxzZSBpZihleHAgPiAxMjgpIGV4cCA9IDEyODsKCXZhciBzaWcgPSBNYXRoLnJvdW5kKChhZiAvIE1hdGgucG93KDIsZXhwKSAtIDEpICogODM4ODYwOCkgJiA4Mzg4NjA3OwoJcmV0dXJuIChmIDwgMD8tMjE0NzQ4MzY0ODowKSB8IGV4cCArIDEyNyA8PCAyMyB8IHNpZzsKfTsKaGF4ZV9pb19GUEhlbHBlci5pNjRUb0RvdWJsZSA9IGZ1bmN0aW9uKGxvdyxoaWdoKSB7Cgl2YXIgc2lnbiA9IDEgLSAoaGlnaCA%Pj4gMzEgPDwgMSk7Cgl2YXIgZXhwID0gKGhpZ2ggPj4gMjAgJiAyMDQ3KSAtIDEwMjM7Cgl2YXIgc2lnID0gKGhpZ2ggJiAxMDQ4NTc1KSAqIDQyOTQ5NjcyOTYuICsgKGxvdyA%Pj4gMzEpICogMjE0NzQ4MzY0OC4gKyAobG93ICYgMjE0NzQ4MzY0Nyk7CglpZihzaWcgPT0gMCAmJiBleHAgPT0gLTEwMjMpIHJldHVybiAwLjA7CglyZXR1cm4gc2lnbiAqICgxLjAgKyBNYXRoLnBvdygyLC01MikgKiBzaWcpICogTWF0aC5wb3coMixleHApOwp9OwpoYXhlX2lvX0ZQSGVscGVyLmRvdWJsZVRvSTY0ID0gZnVuY3Rpb24odikgewoJdmFyIGk2NCA9IGhheGVfaW9fRlBIZWxwZXIuaTY0dG1wOwoJaWYodiA9PSAwKSB7CgkJaTY0LmxvdyA9IDA7CgkJaTY0LmhpZ2ggPSAwOwoJfSBlbHNlIHsKCQl2YXIgYXY7CgkJaWYodiA8IDApIGF2ID0gLXY7IGVsc2UgYXYgPSB2OwoJCXZhciBleHAgPSBNYXRoLmZsb29yKE1hdGgubG9nKGF2KSAvIDAuNjkzMTQ3MTgwNTU5OTQ1Myk7CgkJdmFyIHNpZzsKCQl2YXIgdjEgPSAoYXYgLyBNYXRoLnBvdygyLGV4cCkgLSAxKSAqIDQ1MDM1OTk2MjczNzA0OTYuOwoJCXNpZyA9IE1hdGgucm91bmQodjEpOwoJCXZhciBzaWdfbCA9IHNpZyB8IDA7CgkJdmFyIHNpZ19oID0gc2lnIC8gNDI5NDk2NzI5Ni4wIHwgMDsKCQlpNjQubG93ID0gc2lnX2w7CgkJaTY0LmhpZ2ggPSAodiA8IDA:LTIxNDc0ODM2NDg6MCkgfCBleHAgKyAxMDIzIDw8IDIwIHwgc2lnX2g7Cgl9CglyZXR1cm4gaTY0Owp9Owp2YXIganNfXyRCb290X0hheGVFcnJvciA9IGZ1bmN0aW9uKHZhbCkgewoJRXJyb3IuY2FsbCh0aGlzKTsKCXRoaXMudmFsID0gdmFsOwoJaWYoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsanNfXyRCb290X0hheGVFcnJvcik7Cn07CiRoeENsYXNzZXNbImpzLl9Cb290LkhheGVFcnJvciJdID0ganNfXyRCb290X0hheGVFcnJvcjsKanNfXyRCb290X0hheGVFcnJvci5fX25hbWVfXyA9IFsianMiLCJfQm9vdCIsIkhheGVFcnJvciJdOwpqc19fJEJvb3RfSGF4ZUVycm9yLl9fc3VwZXJfXyA9IEVycm9yOwpqc19fJEJvb3RfSGF4ZUVycm9yLnByb3RvdHlwZSA9ICRleHRlbmQoRXJyb3IucHJvdG90eXBlLHsKCV9fY2xhc3NfXzoganNfXyRCb290X0hheGVFcnJvcgp9KTsKdmFyIGpzX0Jvb3QgPSBmdW5jdGlvbigpIHsgfTsKJGh4Q2xhc3Nlc1sianMuQm9vdCJdID0ganNfQm9vdDsKanNfQm9vdC5fX25hbWVfXyA9IFsianMiLCJCb290Il07CmpzX0Jvb3QuZ2V0Q2xhc3MgPSBmdW5jdGlvbihvKSB7CglpZigobyBpbnN0YW5jZW9mIEFycmF5KSAmJiBvLl9fZW51bV9fID09IG51bGwpIHJldHVybiBBcnJheTsgZWxzZSB7CgkJdmFyIGNsID0gby5fX2NsYXNzX187CgkJaWYoY2wgIT0gbnVsbCkgcmV0dXJuIGNsOwoJCXZhciBuYW1lID0ganNfQm9vdC5fX25hdGl2ZUNsYXNzTmFtZShvKTsKCQlpZihuYW1lICE9IG51bGwpIHJldHVybiBqc19Cb290Ll9fcmVzb2x2ZU5hdGl2ZUNsYXNzKG5hbWUpOwoJCXJldHVybiBudWxsOwoJfQp9Owpqc19Cb290Ll9fc3RyaW5nX3JlYyA9IGZ1bmN0aW9uKG8scykgewoJaWYobyA9PSBudWxsKSByZXR1cm4gIm51bGwiOwoJaWYocy5sZW5ndGggPj0gNSkgcmV0dXJuICI8Li4uPiI7Cgl2YXIgdCA9IHR5cGVvZihvKTsKCWlmKHQgPT0gImZ1bmN0aW9uIiAmJiAoby5fX25hbWVfXyB8fCBvLl9fZW5hbWVfXykpIHQgPSAib2JqZWN0IjsKCXN3aXRjaCh0KSB7CgljYXNlICJvYmplY3QiOgoJCWlmKG8gaW5zdGFuY2VvZiBBcnJheSkgewoJCQlpZihvLl9fZW51bV9fKSB7CgkJCQlpZihvLmxlbmd0aCA9PSAyKSByZXR1cm4gb1swXTsKCQkJCXZhciBzdHIyID0gb1swXSArICIoIjsKCQkJCXMgKz0gIlx0IjsKCQkJCXZhciBfZzEgPSAyOwoJCQkJdmFyIF9nID0gby5sZW5ndGg7CgkJCQl3aGlsZShfZzEgPCBfZykgewoJCQkJCXZhciBpMSA9IF9nMSsrOwoJCQkJCWlmKGkxICE9IDIpIHN0cjIgKz0gIiwiICsganNfQm9vdC5fX3N0cmluZ19yZWMob1tpMV0scyk7IGVsc2Ugc3RyMiArPSBqc19Cb290Ll9fc3RyaW5nX3JlYyhvW2kxXSxzKTsKCQkJCX0KCQkJCXJldHVybiBzdHIyICsgIikiOwoJCQl9CgkJCXZhciBsID0gby5sZW5ndGg7CgkJCXZhciBpOwoJCQl2YXIgc3RyMSA9ICJbIjsKCQkJcyArPSAiXHQiOwoJCQl2YXIgX2cyID0gMDsKCQkJd2hpbGUoX2cyIDwgbCkgewoJCQkJdmFyIGkyID0gX2cyKys7CgkJCQlzdHIxICs9IChpMiA%IDA:IiwiOiIiKSArIGpzX0Jvb3QuX19zdHJpbmdfcmVjKG9baTJdLHMpOwoJCQl9CgkJCXN0cjEgKz0gIl0iOwoJCQlyZXR1cm4gc3RyMTsKCQl9CgkJdmFyIHRvc3RyOwoJCXRyeSB7CgkJCXRvc3RyID0gby50b1N0cmluZzsKCQl9IGNhdGNoKCBlICkgewoJCQlpZiAoZSBpbnN0YW5jZW9mIGpzX18kQm9vdF9IYXhlRXJyb3IpIGUgPSBlLnZhbDsKCQkJcmV0dXJuICI:Pz8iOwoJCX0KCQlpZih0b3N0ciAhPSBudWxsICYmIHRvc3RyICE9IE9iamVjdC50b1N0cmluZyAmJiB0eXBlb2YodG9zdHIpID09ICJmdW5jdGlvbiIpIHsKCQkJdmFyIHMyID0gby50b1N0cmluZygpOwoJCQlpZihzMiAhPSAiW29iamVjdCBPYmplY3RdIikgcmV0dXJuIHMyOwoJCX0KCQl2YXIgayA9IG51bGw7CgkJdmFyIHN0ciA9ICJ7XG4iOwoJCXMgKz0gIlx0IjsKCQl2YXIgaGFzcCA9IG8uaGFzT3duUHJvcGVydHkgIT0gbnVsbDsKCQlmb3IoIHZhciBrIGluIG8gKSB7CgkJaWYoaGFzcCAmJiAhby5oYXNPd25Qcm9wZXJ0eShrKSkgewoJCQljb250aW51ZTsKCQl9CgkJaWYoayA9PSAicHJvdG90eXBlIiB8fCBrID09ICJfX2NsYXNzX18iIHx8IGsgPT0gIl9fc3VwZXJfXyIgfHwgayA9PSAiX19pbnRlcmZhY2VzX18iIHx8IGsgPT0gIl9fcHJvcGVydGllc19fIikgewoJCQljb250aW51ZTsKCQl9CgkJaWYoc3RyLmxlbmd0aCAhPSAyKSBzdHIgKz0gIiwgXG4iOwoJCXN0ciArPSBzICsgayArICIgOiAiICsganNfQm9vdC5fX3N0cmluZ19yZWMob1trXSxzKTsKCQl9CgkJcyA9IHMuc3Vic3RyaW5nKDEpOwoJCXN0ciArPSAiXG4iICsgcyArICJ9IjsKCQlyZXR1cm4gc3RyOwoJY2FzZSAiZnVuY3Rpb24iOgoJCXJldHVybiAiPGZ1bmN0aW9uPiI7CgljYXNlICJzdHJpbmciOgoJCXJldHVybiBvOwoJZGVmYXVsdDoKCQlyZXR1cm4gU3RyaW5nKG8pOwoJfQp9Owpqc19Cb290Ll9faW50ZXJmTG9vcCA9IGZ1bmN0aW9uKGNjLGNsKSB7CglpZihjYyA9PSBudWxsKSByZXR1cm4gZmFsc2U7CglpZihjYyA9PSBjbCkgcmV0dXJuIHRydWU7Cgl2YXIgaW50ZiA9IGNjLl9faW50ZXJmYWNlc19fOwoJaWYoaW50ZiAhPSBudWxsKSB7CgkJdmFyIF9nMSA9IDA7CgkJdmFyIF9nID0gaW50Zi5sZW5ndGg7CgkJd2hpbGUoX2cxIDwgX2cpIHsKCQkJdmFyIGkgPSBfZzErKzsKCQkJdmFyIGkxID0gaW50ZltpXTsKCQkJaWYoaTEgPT0gY2wgfHwganNfQm9vdC5fX2ludGVyZkxvb3AoaTEsY2wpKSByZXR1cm4gdHJ1ZTsKCQl9Cgl9CglyZXR1cm4ganNfQm9vdC5fX2ludGVyZkxvb3AoY2MuX19zdXBlcl9fLGNsKTsKfTsKanNfQm9vdC5fX2luc3RhbmNlb2YgPSBmdW5jdGlvbihvLGNsKSB7CglpZihjbCA9PSBudWxsKSByZXR1cm4gZmFsc2U7Cglzd2l0Y2goY2wpIHsKCWNhc2UgSW50OgoJCXJldHVybiAob3wwKSA9PT0gbzsKCWNhc2UgRmxvYXQ6CgkJcmV0dXJuIHR5cGVvZihvKSA9PSAibnVtYmVyIjsKCWNhc2UgQm9vbDoKCQlyZXR1cm4gdHlwZW9mKG8pID09ICJib29sZWFuIjsKCWNhc2UgU3RyaW5nOgoJCXJldHVybiB0eXBlb2YobykgPT0gInN0cmluZyI7CgljYXNlIEFycmF5OgoJCXJldHVybiAobyBpbnN0YW5jZW9mIEFycmF5KSAmJiBvLl9fZW51bV9fID09IG51bGw7CgljYXNlIER5bmFtaWM6CgkJcmV0dXJuIHRydWU7CglkZWZhdWx0OgoJCWlmKG8gIT0gbnVsbCkgewoJCQlpZih0eXBlb2YoY2wpID09ICJmdW5jdGlvbiIpIHsKCQkJCWlmKG8gaW5zdGFuY2VvZiBjbCkgcmV0dXJuIHRydWU7CgkJCQlpZihqc19Cb290Ll9faW50ZXJmTG9vcChqc19Cb290LmdldENsYXNzKG8pLGNsKSkgcmV0dXJuIHRydWU7CgkJCX0gZWxzZSBpZih0eXBlb2YoY2wpID09ICJvYmplY3QiICYmIGpzX0Jvb3QuX19pc05hdGl2ZU9iaihjbCkpIHsKCQkJCWlmKG8gaW5zdGFuY2VvZiBjbCkgcmV0dXJuIHRydWU7CgkJCX0KCQl9IGVsc2UgcmV0dXJuIGZhbHNlOwoJCWlmKGNsID09IENsYXNzICYmIG8uX19uYW1lX18gIT0gbnVsbCkgcmV0dXJuIHRydWU7CgkJaWYoY2wgPT0gRW51bSAmJiBvLl9fZW5hbWVfXyAhPSBudWxsKSByZXR1cm4gdHJ1ZTsKCQlyZXR1cm4gby5fX2VudW1fXyA9PSBjbDsKCX0KfTsKanNfQm9vdC5fX25hdGl2ZUNsYXNzTmFtZSA9IGZ1bmN0aW9uKG8pIHsKCXZhciBuYW1lID0ganNfQm9vdC5fX3RvU3RyLmNhbGwobykuc2xpY2UoOCwtMSk7CglpZihuYW1lID09ICJPYmplY3QiIHx8IG5hbWUgPT0gIkZ1bmN0aW9uIiB8fCBuYW1lID09ICJNYXRoIiB8fCBuYW1lID09ICJKU09OIikgcmV0dXJuIG51bGw7CglyZXR1cm4gbmFtZTsKfTsKanNfQm9vdC5fX2lzTmF0aXZlT2JqID0gZnVuY3Rpb24obykgewoJcmV0dXJuIGpzX0Jvb3QuX19uYXRpdmVDbGFzc05hbWUobykgIT0gbnVsbDsKfTsKanNfQm9vdC5fX3Jlc29sdmVOYXRpdmVDbGFzcyA9IGZ1bmN0aW9uKG5hbWUpIHsKCWlmKHR5cGVvZiB3aW5kb3cgIT0gInVuZGVmaW5lZCIpIHJldHVybiB3aW5kb3dbbmFtZV07IGVsc2UgcmV0dXJuIGdsb2JhbFtuYW1lXTsKfTsKdmFyIGpzX2h0bWxfY29tcGF0X0FycmF5QnVmZmVyID0gZnVuY3Rpb24oYSkgewoJaWYoKGEgaW5zdGFuY2VvZiBBcnJheSkgJiYgYS5fX2VudW1fXyA9PSBudWxsKSB7CgkJdGhpcy5hID0gYTsKCQl0aGlzLmJ5dGVMZW5ndGggPSBhLmxlbmd0aDsKCX0gZWxzZSB7CgkJdmFyIGxlbiA9IGE7CgkJdGhpcy5hID0gW107CgkJdmFyIF9nID0gMDsKCQl3aGlsZShfZyA8IGxlbikgewoJCQl2YXIgaSA9IF9nKys7CgkJCXRoaXMuYVtpXSA9IDA7CgkJfQoJCXRoaXMuYnl0ZUxlbmd0aCA9IGxlbjsKCX0KfTsKJGh4Q2xhc3Nlc1sianMuaHRtbC5jb21wYXQuQXJyYXlCdWZmZXIiXSA9IGpzX2h0bWxfY29tcGF0X0FycmF5QnVmZmVyOwpqc19odG1sX2NvbXBhdF9BcnJheUJ1ZmZlci5fX25hbWVfXyA9IFsianMiLCJodG1sIiwiY29tcGF0IiwiQXJyYXlCdWZmZXIiXTsKanNfaHRtbF9jb21wYXRfQXJyYXlCdWZmZXIuc2xpY2VJbXBsID0gZnVuY3Rpb24oYmVnaW4sZW5kKSB7Cgl2YXIgdSA9IG5ldyBVaW50OEFycmF5KHRoaXMsYmVnaW4sZW5kID09IG51bGw:bnVsbDplbmQgLSBiZWdpbik7Cgl2YXIgcmVzdWx0ID0gbmV3IEFycmF5QnVmZmVyKHUuYnl0ZUxlbmd0aCk7Cgl2YXIgcmVzdWx0QXJyYXkgPSBuZXcgVWludDhBcnJheShyZXN1bHQpOwoJcmVzdWx0QXJyYXkuc2V0KHUpOwoJcmV0dXJuIHJlc3VsdDsKfTsKanNfaHRtbF9jb21wYXRfQXJyYXlCdWZmZXIucHJvdG90eXBlID0gewoJc2xpY2U6IGZ1bmN0aW9uKGJlZ2luLGVuZCkgewoJCXJldHVybiBuZXcganNfaHRtbF9jb21wYXRfQXJyYXlCdWZmZXIodGhpcy5hLnNsaWNlKGJlZ2luLGVuZCkpOwoJfQoJLF9fY2xhc3NfXzoganNfaHRtbF9jb21wYXRfQXJyYXlCdWZmZXIKfTsKdmFyIGpzX2h0bWxfY29tcGF0X0RhdGFWaWV3ID0gZnVuY3Rpb24oYnVmZmVyLGJ5dGVPZmZzZXQsYnl0ZUxlbmd0aCkgewoJdGhpcy5idWYgPSBidWZmZXI7CglpZihieXRlT2Zmc2V0ID09IG51bGwpIHRoaXMub2Zmc2V0ID0gMDsgZWxzZSB0aGlzLm9mZnNldCA9IGJ5dGVPZmZzZXQ7CglpZihieXRlTGVuZ3RoID09IG51bGwpIHRoaXMubGVuZ3RoID0gYnVmZmVyLmJ5dGVMZW5ndGggLSB0aGlzLm9mZnNldDsgZWxzZSB0aGlzLmxlbmd0aCA9IGJ5dGVMZW5ndGg7CglpZih0aGlzLm9mZnNldCA8IDAgfHwgdGhpcy5sZW5ndGggPCAwIHx8IHRoaXMub2Zmc2V0ICsgdGhpcy5sZW5ndGggPiBidWZmZXIuYnl0ZUxlbmd0aCkgdGhyb3cgbmV3IGpzX18kQm9vdF9IYXhlRXJyb3IoaGF4ZV9pb19FcnJvci5PdXRzaWRlQm91bmRzKTsKfTsKJGh4Q2xhc3Nlc1sianMuaHRtbC5jb21wYXQuRGF0YVZpZXciXSA9IGpzX2h0bWxfY29tcGF0X0RhdGFWaWV3Owpqc19odG1sX2NvbXBhdF9EYXRhVmlldy5fX25hbWVfXyA9IFsianMiLCJodG1sIiwiY29tcGF0IiwiRGF0YVZpZXciXTsKanNfaHRtbF9jb21wYXRfRGF0YVZpZXcucHJvdG90eXBlID0gewoJZ2V0SW50ODogZnVuY3Rpb24oYnl0ZU9mZnNldCkgewoJCXZhciB2ID0gdGhpcy5idWYuYVt0aGlzLm9mZnNldCArIGJ5dGVPZmZzZXRdOwoJCWlmKHYgPj0gMTI4KSByZXR1cm4gdiAtIDI1NjsgZWxzZSByZXR1cm4gdjsKCX0KCSxnZXRVaW50ODogZnVuY3Rpb24oYnl0ZU9mZnNldCkgewoJCXJldHVybiB0aGlzLmJ1Zi5hW3RoaXMub2Zmc2V0ICsgYnl0ZU9mZnNldF07Cgl9CgksZ2V0SW50MTY6IGZ1bmN0aW9uKGJ5dGVPZmZzZXQsbGl0dGxlRW5kaWFuKSB7CgkJdmFyIHYgPSB0aGlzLmdldFVpbnQxNihieXRlT2Zmc2V0LGxpdHRsZUVuZGlhbik7CgkJaWYodiA%PSAzMjc2OCkgcmV0dXJuIHYgLSA2NTUzNjsgZWxzZSByZXR1cm4gdjsKCX0KCSxnZXRVaW50MTY6IGZ1bmN0aW9uKGJ5dGVPZmZzZXQsbGl0dGxlRW5kaWFuKSB7CgkJaWYobGl0dGxlRW5kaWFuKSByZXR1cm4gdGhpcy5idWYuYVt0aGlzLm9mZnNldCArIGJ5dGVPZmZzZXRdIHwgdGhpcy5idWYuYVt0aGlzLm9mZnNldCArIGJ5dGVPZmZzZXQgKyAxXSA8PCA4OyBlbHNlIHJldHVybiB0aGlzLmJ1Zi5hW3RoaXMub2Zmc2V0ICsgYnl0ZU9mZnNldF0gPDwgOCB8IHRoaXMuYnVmLmFbdGhpcy5vZmZzZXQgKyBieXRlT2Zmc2V0ICsgMV07Cgl9CgksZ2V0SW50MzI6IGZ1bmN0aW9uKGJ5dGVPZmZzZXQsbGl0dGxlRW5kaWFuKSB7CgkJdmFyIHAgPSB0aGlzLm9mZnNldCArIGJ5dGVPZmZzZXQ7CgkJdmFyIGEgPSB0aGlzLmJ1Zi5hW3ArK107CgkJdmFyIGIgPSB0aGlzLmJ1Zi5hW3ArK107CgkJdmFyIGMgPSB0aGlzLmJ1Zi5hW3ArK107CgkJdmFyIGQgPSB0aGlzLmJ1Zi5hW3ArK107CgkJaWYobGl0dGxlRW5kaWFuKSByZXR1cm4gYSB8IGIgPDwgOCB8IGMgPDwgMTYgfCBkIDw8IDI0OyBlbHNlIHJldHVybiBkIHwgYyA8PCA4IHwgYiA8PCAxNiB8IGEgPDwgMjQ7Cgl9CgksZ2V0VWludDMyOiBmdW5jdGlvbihieXRlT2Zmc2V0LGxpdHRsZUVuZGlhbikgewoJCXZhciB2ID0gdGhpcy5nZXRJbnQzMihieXRlT2Zmc2V0LGxpdHRsZUVuZGlhbik7CgkJaWYodiA8IDApIHJldHVybiB2ICsgNDI5NDk2NzI5Ni47IGVsc2UgcmV0dXJuIHY7Cgl9CgksZ2V0RmxvYXQzMjogZnVuY3Rpb24oYnl0ZU9mZnNldCxsaXR0bGVFbmRpYW4pIHsKCQlyZXR1cm4gaGF4ZV9pb19GUEhlbHBlci5pMzJUb0Zsb2F0KHRoaXMuZ2V0SW50MzIoYnl0ZU9mZnNldCxsaXR0bGVFbmRpYW4pKTsKCX0KCSxnZXRGbG9hdDY0OiBmdW5jdGlvbihieXRlT2Zmc2V0LGxpdHRsZUVuZGlhbikgewoJCXZhciBhID0gdGhpcy5nZXRJbnQzMihieXRlT2Zmc2V0LGxpdHRsZUVuZGlhbik7CgkJdmFyIGIgPSB0aGlzLmdldEludDMyKGJ5dGVPZmZzZXQgKyA0LGxpdHRsZUVuZGlhbik7CgkJcmV0dXJuIGhheGVfaW9fRlBIZWxwZXIuaTY0VG9Eb3VibGUobGl0dGxlRW5kaWFuP2E6YixsaXR0bGVFbmRpYW4:YjphKTsKCX0KCSxzZXRJbnQ4OiBmdW5jdGlvbihieXRlT2Zmc2V0LHZhbHVlKSB7CgkJaWYodmFsdWUgPCAwKSB0aGlzLmJ1Zi5hW2J5dGVPZmZzZXQgKyB0aGlzLm9mZnNldF0gPSB2YWx1ZSArIDEyOCAmIDI1NTsgZWxzZSB0aGlzLmJ1Zi5hW2J5dGVPZmZzZXQgKyB0aGlzLm9mZnNldF0gPSB2YWx1ZSAmIDI1NTsKCX0KCSxzZXRVaW50ODogZnVuY3Rpb24oYnl0ZU9mZnNldCx2YWx1ZSkgewoJCXRoaXMuYnVmLmFbYnl0ZU9mZnNldCArIHRoaXMub2Zmc2V0XSA9IHZhbHVlICYgMjU1OwoJfQoJLHNldEludDE2OiBmdW5jdGlvbihieXRlT2Zmc2V0LHZhbHVlLGxpdHRsZUVuZGlhbikgewoJCXRoaXMuc2V0VWludDE2KGJ5dGVPZmZzZXQsdmFsdWUgPCAwP3ZhbHVlICsgNjU1MzY6dmFsdWUsbGl0dGxlRW5kaWFuKTsKCX0KCSxzZXRVaW50MTY6IGZ1bmN0aW9uKGJ5dGVPZmZzZXQsdmFsdWUsbGl0dGxlRW5kaWFuKSB7CgkJdmFyIHAgPSBieXRlT2Zmc2V0ICsgdGhpcy5vZmZzZXQ7CgkJaWYobGl0dGxlRW5kaWFuKSB7CgkJCXRoaXMuYnVmLmFbcF0gPSB2YWx1ZSAmIDI1NTsKCQkJdGhpcy5idWYuYVtwKytdID0gdmFsdWUgPj4gOCAmIDI1NTsKCQl9IGVsc2UgewoJCQl0aGlzLmJ1Zi5hW3ArK10gPSB2YWx1ZSA%PiA4ICYgMjU1OwoJCQl0aGlzLmJ1Zi5hW3BdID0gdmFsdWUgJiAyNTU7CgkJfQoJfQoJLHNldEludDMyOiBmdW5jdGlvbihieXRlT2Zmc2V0LHZhbHVlLGxpdHRsZUVuZGlhbikgewoJCXRoaXMuc2V0VWludDMyKGJ5dGVPZmZzZXQsdmFsdWUsbGl0dGxlRW5kaWFuKTsKCX0KCSxzZXRVaW50MzI6IGZ1bmN0aW9uKGJ5dGVPZmZzZXQsdmFsdWUsbGl0dGxlRW5kaWFuKSB7CgkJdmFyIHAgPSBieXRlT2Zmc2V0ICsgdGhpcy5vZmZzZXQ7CgkJaWYobGl0dGxlRW5kaWFuKSB7CgkJCXRoaXMuYnVmLmFbcCsrXSA9IHZhbHVlICYgMjU1OwoJCQl0aGlzLmJ1Zi5hW3ArK10gPSB2YWx1ZSA%PiA4ICYgMjU1OwoJCQl0aGlzLmJ1Zi5hW3ArK10gPSB2YWx1ZSA%PiAxNiAmIDI1NTsKCQkJdGhpcy5idWYuYVtwKytdID0gdmFsdWUgPj4%IDI0OwoJCX0gZWxzZSB7CgkJCXRoaXMuYnVmLmFbcCsrXSA9IHZhbHVlID4%PiAyNDsKCQkJdGhpcy5idWYuYVtwKytdID0gdmFsdWUgPj4gMTYgJiAyNTU7CgkJCXRoaXMuYnVmLmFbcCsrXSA9IHZhbHVlID4%IDggJiAyNTU7CgkJCXRoaXMuYnVmLmFbcCsrXSA9IHZhbHVlICYgMjU1OwoJCX0KCX0KCSxzZXRGbG9hdDMyOiBmdW5jdGlvbihieXRlT2Zmc2V0LHZhbHVlLGxpdHRsZUVuZGlhbikgewoJCXRoaXMuc2V0VWludDMyKGJ5dGVPZmZzZXQsaGF4ZV9pb19GUEhlbHBlci5mbG9hdFRvSTMyKHZhbHVlKSxsaXR0bGVFbmRpYW4pOwoJfQoJLHNldEZsb2F0NjQ6IGZ1bmN0aW9uKGJ5dGVPZmZzZXQsdmFsdWUsbGl0dGxlRW5kaWFuKSB7CgkJdmFyIGk2NCA9IGhheGVfaW9fRlBIZWxwZXIuZG91YmxlVG9JNjQodmFsdWUpOwoJCWlmKGxpdHRsZUVuZGlhbikgewoJCQl0aGlzLnNldFVpbnQzMihieXRlT2Zmc2V0LGk2NC5sb3cpOwoJCQl0aGlzLnNldFVpbnQzMihieXRlT2Zmc2V0LGk2NC5oaWdoKTsKCQl9IGVsc2UgewoJCQl0aGlzLnNldFVpbnQzMihieXRlT2Zmc2V0LGk2NC5oaWdoKTsKCQkJdGhpcy5zZXRVaW50MzIoYnl0ZU9mZnNldCxpNjQubG93KTsKCQl9Cgl9CgksX19jbGFzc19fOiBqc19odG1sX2NvbXBhdF9EYXRhVmlldwp9Owp2YXIganNfaHRtbF9jb21wYXRfVWludDhBcnJheSA9IGZ1bmN0aW9uKCkgeyB9OwokaHhDbGFzc2VzWyJqcy5odG1sLmNvbXBhdC5VaW50OEFycmF5Il0gPSBqc19odG1sX2NvbXBhdF9VaW50OEFycmF5Owpqc19odG1sX2NvbXBhdF9VaW50OEFycmF5Ll9fbmFtZV9fID0gWyJqcyIsImh0bWwiLCJjb21wYXQiLCJVaW50OEFycmF5Il07CmpzX2h0bWxfY29tcGF0X1VpbnQ4QXJyYXkuX25ldyA9IGZ1bmN0aW9uKGFyZzEsb2Zmc2V0LGxlbmd0aCkgewoJdmFyIGFycjsKCWlmKHR5cGVvZihhcmcxKSA9PSAibnVtYmVyIikgewoJCWFyciA9IFtdOwoJCXZhciBfZyA9IDA7CgkJd2hpbGUoX2cgPCBhcmcxKSB7CgkJCXZhciBpID0gX2crKzsKCQkJYXJyW2ldID0gMDsKCQl9CgkJYXJyLmJ5dGVMZW5ndGggPSBhcnIubGVuZ3RoOwoJCWFyci5ieXRlT2Zmc2V0ID0gMDsKCQlhcnIuYnVmZmVyID0gbmV3IGpzX2h0bWxfY29tcGF0X0FycmF5QnVmZmVyKGFycik7Cgl9IGVsc2UgaWYoanNfQm9vdC5fX2luc3RhbmNlb2YoYXJnMSxqc19odG1sX2NvbXBhdF9BcnJheUJ1ZmZlcikpIHsKCQl2YXIgYnVmZmVyID0gYXJnMTsKCQlpZihvZmZzZXQgPT0gbnVsbCkgb2Zmc2V0ID0gMDsKCQlpZihsZW5ndGggPT0gbnVsbCkgbGVuZ3RoID0gYnVmZmVyLmJ5dGVMZW5ndGggLSBvZmZzZXQ7CgkJaWYob2Zmc2V0ID09IDApIGFyciA9IGJ1ZmZlci5hOyBlbHNlIGFyciA9IGJ1ZmZlci5hLnNsaWNlKG9mZnNldCxvZmZzZXQgKyBsZW5ndGgpOwoJCWFyci5ieXRlTGVuZ3RoID0gYXJyLmxlbmd0aDsKCQlhcnIuYnl0ZU9mZnNldCA9IG9mZnNldDsKCQlhcnIuYnVmZmVyID0gYnVmZmVyOwoJfSBlbHNlIGlmKChhcmcxIGluc3RhbmNlb2YgQXJyYXkpICYmIGFyZzEuX19lbnVtX18gPT0gbnVsbCkgewoJCWFyciA9IGFyZzEuc2xpY2UoKTsKCQlhcnIuYnl0ZUxlbmd0aCA9IGFyci5sZW5ndGg7CgkJYXJyLmJ5dGVPZmZzZXQgPSAwOwoJCWFyci5idWZmZXIgPSBuZXcganNfaHRtbF9jb21wYXRfQXJyYXlCdWZmZXIoYXJyKTsKCX0gZWxzZSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiVE9ETyAiICsgU3RkLnN0cmluZyhhcmcxKSk7CglhcnIuc3ViYXJyYXkgPSBqc19odG1sX2NvbXBhdF9VaW50OEFycmF5Ll9zdWJhcnJheTsKCWFyci5zZXQgPSBqc19odG1sX2NvbXBhdF9VaW50OEFycmF5Ll9zZXQ7CglyZXR1cm4gYXJyOwp9Owpqc19odG1sX2NvbXBhdF9VaW50OEFycmF5Ll9zZXQgPSBmdW5jdGlvbihhcmcsb2Zmc2V0KSB7Cgl2YXIgdCA9IHRoaXM7CglpZihqc19Cb290Ll9faW5zdGFuY2VvZihhcmcuYnVmZmVyLGpzX2h0bWxfY29tcGF0X0FycmF5QnVmZmVyKSkgewoJCXZhciBhID0gYXJnOwoJCWlmKGFyZy5ieXRlTGVuZ3RoICsgb2Zmc2V0ID4gdC5ieXRlTGVuZ3RoKSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigic2V0KCkgb3V0c2lkZSBvZiByYW5nZSIpOwoJCXZhciBfZzEgPSAwOwoJCXZhciBfZyA9IGFyZy5ieXRlTGVuZ3RoOwoJCXdoaWxlKF9nMSA8IF9nKSB7CgkJCXZhciBpID0gX2cxKys7CgkJCXRbaSArIG9mZnNldF0gPSBhW2ldOwoJCX0KCX0gZWxzZSBpZigoYXJnIGluc3RhbmNlb2YgQXJyYXkpICYmIGFyZy5fX2VudW1fXyA9PSBudWxsKSB7CgkJdmFyIGExID0gYXJnOwoJCWlmKGExLmxlbmd0aCArIG9mZnNldCA%:YTpbXTsKfTsKdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLmdldCA9IGZ1bmN0aW9uKHRoaXMxLGkpIHsKCXJldHVybiB0aGlzMVtpXTsKfTsKdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLnNldCA9IGZ1bmN0aW9uKHRoaXMxLGksbmIpIHsKCXRoaXMxW2ldID0gbmI7CglyZXR1cm4gdGhpczFbaV07Cn07CnRhbm51c19pb19fJEJ5dGVBcnJheV9CeXRlQXJyYXlfJEltcGxfJC5pdGVyYXRvciA9IGZ1bmN0aW9uKHRoaXMxKSB7CglyZXR1cm4gSHhPdmVycmlkZXMuaXRlcih0aGlzMSk7Cn07CnRhbm51c19pb19fJEJ5dGVBcnJheV9CeXRlQXJyYXlfJEltcGxfJC5nZXRfc2VsZiA9IGZ1bmN0aW9uKHRoaXMxKSB7CglyZXR1cm4gdGhpczE7Cn07CnRhbm51c19pb19fJEJ5dGVBcnJheV9CeXRlQXJyYXlfJEltcGxfJC5nZXRfZW1wdHkgPSBmdW5jdGlvbih0aGlzMSkgewoJcmV0dXJuIHRoaXMxLmxlbmd0aCA9PSAwOwp9Owp0YW5udXNfaW9fXyRCeXRlQXJyYXlfQnl0ZUFycmF5XyRJbXBsXyQuZWFjaCA9IGZ1bmN0aW9uKHRoaXMxLGZ1bmMsc3RhcnQsZW5kKSB7Cgl2YXIgaW5kZXg7CglpZihzdGFydCAhPSBudWxsKSBpbmRleCA9IHN0YXJ0OyBlbHNlIGluZGV4ID0gMDsKCXZhciBnb2FsOwoJaWYoZW5kICE9IG51bGwpIGdvYWwgPSBlbmQ7IGVsc2UgZ29hbCA9IHRoaXMxLmxlbmd0aDsKCWlmKGluZGV4IDwgMCkgewoJCWlmKGVuZCA9PSBudWxsKSB7CgkJCXZhciBfaSA9IGluZGV4OwoJCQlpbmRleCA9IHRoaXMxLmxlbmd0aCArIF9pOwoJCX0gZWxzZSB0aHJvdyBuZXcganNfXyRCb290X0hheGVFcnJvcigiSW52YWxpZCBzdGFydCBpbmRleCAiICsgaW5kZXggKyAiISIpOwoJfQoJdmFyIGNiOwoJd2hpbGUoaW5kZXggPCBnb2FsKSB7CgkJY2IgPSB0aGlzMVtpbmRleF07CgkJZnVuYyhpbmRleCxjYik7CgkJaW5kZXgrKzsKCX0KfTsKdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLnNsaWNlID0gZnVuY3Rpb24odGhpczEsc3RhcnQsZW5kKSB7Cgl7CgkJdmFyIGlhID0gdGhpczEuc2xpY2Uoc3RhcnQsZW5kKTsKCQlyZXR1cm4gdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLl9uZXcoaWEubWFwKGZ1bmN0aW9uKG4pIHsKCQkJdmFyIHRoaXMyOwoJCQlpZighdGFubnVzX2lvX18kQnl0ZV9CeXRlXyRJbXBsXyQuaXNWYWxpZChuKSkgdGhyb3cgbmV3IGpzX18kQm9vdF9IYXhlRXJyb3IoIkludmFsaWQgQnl0ZSBWYWx1ZSAoIiArIG4gKyAiKSEiKTsKCQkJdGhpczIgPSBuOwoJCQlyZXR1cm4gdGhpczI7CgkJfSkpOwoJfQp9Owp0YW5udXNfaW9fXyRCeXRlQXJyYXlfQnl0ZUFycmF5XyRJbXBsXyQuaW5kZXhPZiA9IGZ1bmN0aW9uKHRoaXMxLHN1YikgewoJdmFyIF9nMSA9IDA7Cgl2YXIgX2cgPSB0aGlzMS5sZW5ndGggLSBzdWIubGVuZ3RoOwoJd2hpbGUoX2cxIDwgX2cpIHsKCQl2YXIgaSA9IF9nMSsrOwoJCXZhciBodW5rID0gdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLnNsaWNlKHRoaXMxLGksaSArIHN1Yi5sZW5ndGgpOwoJCWNvbnNvbGUubG9nKGh1bmsubWFwKGZ1bmN0aW9uKGIpIHsKCQkJcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYik7CgkJfSkuam9pbigiIikpOwoJCWlmKHRhbm51c19pb19fJEJ5dGVBcnJheV9CeXRlQXJyYXlfJEltcGxfJC5lcXVhbHNfYnl0ZUFycmF5KGh1bmssc3ViKSkgcmV0dXJuIGk7Cgl9CglyZXR1cm4gLTE7Cn07CnRhbm51c19pb19fJEJ5dGVBcnJheV9CeXRlQXJyYXlfJEltcGxfJC5jb250YWlucyA9IGZ1bmN0aW9uKHRoaXMxLHN1YikgewoJcmV0dXJuIExhbWJkYS5pbmRleE9mKHRoaXMxLChmdW5jdGlvbigkdGhpcykgewoJCXZhciAkcjsKCQl2YXIgbGVuID0gc3ViLmxlbmd0aDsKCQl2YXIgY2wgPSBCdWZmZXI7CgkJdmFyIGJ1ZiA9IFR5cGUuY3JlYXRlSW5zdGFuY2UoY2wsW3N1Yl0pOwoJCSRyID0gYnVmOwoJCXJldHVybiAkcjsKCX0odGhpcykpKSAhPSAtMTsKfTsKdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLndyaXRlU3RyaW5nID0gZnVuY3Rpb24odGhpczEscykgewoJdmFyIF9nID0gMDsKCXZhciBfZzEgPSBzLnNwbGl0KCIiKTsKCXdoaWxlKF9nIDwgX2cxLmxlbmd0aCkgewoJCXZhciBjID0gX2cxW19nXTsKCQkrK19nOwoJCXRoaXMxLnB1c2goKGZ1bmN0aW9uKCR0aGlzKSB7CgkJCXZhciAkcjsKCQkJdmFyIGIgPSAwOwoJCQl7CgkJCQl2YXIgbiA9IEh4T3ZlcnJpZGVzLmNjYShjLDApOwoJCQkJaWYoIXRhbm51c19pb19fJEJ5dGVfQnl0ZV8kSW1wbF8kLmlzVmFsaWQobikpIHRocm93IG5ldyBqc19fJEJvb3RfSGF4ZUVycm9yKCJJbnZhbGlkIEJ5dGUgVmFsdWUgKCIgKyBuICsgIikhIik7CgkJCQliID0gbjsKCQkJCVN0cmluZy5mcm9tQ2hhckNvZGUoYik7CgkJCX0KCQkJJHIgPSBiOwoJCQlyZXR1cm4gJHI7CgkJfSh0aGlzKSkpOwoJfQp9Owp0YW5udXNfaW9fXyRCeXRlQXJyYXlfQnl0ZUFycmF5XyRJbXBsXyQud3JpdGUgPSBmdW5jdGlvbih0aGlzMSxiYSkgewoJdGhpczEgPSB0aGlzMS5jb25jYXQoYmEpOwp9Owp0YW5udXNfaW9fXyRCeXRlQXJyYXlfQnl0ZUFycmF5XyRJbXBsXyQudG9EYXRhVVJJID0gZnVuY3Rpb24odGhpczEsbWltZSkgewoJaWYobWltZSA9PSBudWxsKSBtaW1lID0gInRleHQvcGxhaW4iOwoJdmFyIGVuY29kZWQgPSBoYXhlX2NyeXB0b19CYXNlNjQuZW5jb2RlKChmdW5jdGlvbigkdGhpcykgewoJCXZhciAkcjsKCQl2YXIgdGhpczIgPSB0aGlzMTsKCQl2YXIgYnVmID0gaGF4ZV9pb19CeXRlcy5hbGxvYyh0aGlzMi5sZW5ndGgpOwoJCXRhbm51c19pb19fJEJ5dGVBcnJheV9CeXRlQXJyYXlfJEltcGxfJC5lYWNoKHRoaXMyLGZ1bmN0aW9uKGksYikgewoJCQlidWYuYltpXSA9IGIgJiAyNTU7CgkJfSk7CgkJJHIgPSBidWY7CgkJcmV0dXJuICRyOwoJfSh0aGlzKSkpOwoJcmV0dXJuICJkYXRhOiIgKyBtaW1lICsgIjtiYXNlNjQsIiArIGVuY29kZWQ7Cn07CnRhbm51c19pb19fJEJ5dGVBcnJheV9CeXRlQXJyYXlfJEltcGxfJC5lcXVhbHNfYnl0ZUFycmF5ID0gZnVuY3Rpb24odGhpczEsb3RoZXIpIHsKCWlmKHRoaXMxLmxlbmd0aCAhPSBvdGhlci5sZW5ndGgpIHJldHVybiBmYWxzZTsgZWxzZSB7CgkJdmFyIGkgPSAwOwoJCXdoaWxlKGkgPCB0aGlzMS5sZW5ndGgpIHsKCQkJaWYodGhpczFbaV0gIT0gb3RoZXJbaV0pIHJldHVybiBmYWxzZTsKCQkJaSsrOwoJCX0KCQlyZXR1cm4gdHJ1ZTsKCX0KfTsKdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLnBsdXMgPSBmdW5jdGlvbih0aGlzMSxvdGhlcikgewoJewoJCXZhciBpYSA9IHRoaXMxLmNvbmNhdChvdGhlcik7CgkJcmV0dXJuIHRhbm51c19pb19fJEJ5dGVBcnJheV9CeXRlQXJyYXlfJEltcGxfJC5fbmV3KGlhLm1hcChmdW5jdGlvbihuKSB7CgkJCXZhciB0aGlzMjsKCQkJaWYoIXRhbm51c19pb19fJEJ5dGVfQnl0ZV8kSW1wbF8kLmlzVmFsaWQobikpIHRocm93IG5ldyBqc19fJEJvb3RfSGF4ZUVycm9yKCJJbnZhbGlkIEJ5dGUgVmFsdWUgKCIgKyBuICsgIikhIik7CgkJCXRoaXMyID0gbjsKCQkJcmV0dXJuIHRoaXMyOwoJCX0pKTsKCX0KfTsKdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLnRvQXJyYXkgPSBmdW5jdGlvbih0aGlzMSkgewoJcmV0dXJuIHRoaXMxOwp9Owp0YW5udXNfaW9fXyRCeXRlQXJyYXlfQnl0ZUFycmF5XyRJbXBsXyQudG9JbnRBcnJheSA9IGZ1bmN0aW9uKHRoaXMxKSB7CglyZXR1cm4gdGhpczEubWFwKGZ1bmN0aW9uKGIpIHsKCQlyZXR1cm4gYjsKCX0pOwp9Owp0YW5udXNfaW9fXyRCeXRlQXJyYXlfQnl0ZUFycmF5XyRJbXBsXyQudG9TdHJpbmcgPSBmdW5jdGlvbih0aGlzMSkgewoJcmV0dXJuIHRoaXMxLm1hcChmdW5jdGlvbihiKSB7CgkJcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYik7Cgl9KS5qb2luKCIiKTsKfTsKdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLnRvQmFzZTY0ID0gZnVuY3Rpb24odGhpczEpIHsKCXZhciBiOwoJewoJCXZhciB0aGlzMiA9IHRoaXMxOwoJCXZhciBidWYgPSBoYXhlX2lvX0J5dGVzLmFsbG9jKHRoaXMyLmxlbmd0aCk7CgkJdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLmVhY2godGhpczIsZnVuY3Rpb24oaSxiMSkgewoJCQlidWYuYltpXSA9IGIxICYgMjU1OwoJCX0pOwoJCWIgPSBidWY7Cgl9CglyZXR1cm4gaGF4ZV9jcnlwdG9fQmFzZTY0LmVuY29kZShiKTsKfTsKdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLnRvQnl0ZXMgPSBmdW5jdGlvbih0aGlzMSkgewoJdmFyIGJ1ZiA9IGhheGVfaW9fQnl0ZXMuYWxsb2ModGhpczEubGVuZ3RoKTsKCXRhbm51c19pb19fJEJ5dGVBcnJheV9CeXRlQXJyYXlfJEltcGxfJC5lYWNoKHRoaXMxLGZ1bmN0aW9uKGksYikgewoJCWJ1Zi5iW2ldID0gYiAmIDI1NTsKCX0pOwoJcmV0dXJuIGJ1ZjsKfTsKdGFubnVzX2lvX18kQnl0ZUFycmF5X0J5dGVBcnJheV8kSW1wbF8kLnRvTm9kZUJ1ZmZlciA9IGZ1bmN0aW9uKHRoaXMxKSB7Cgl2YXIgbGVuID0gdGhpczEubGVuZ3RoOwoJdmFyIGNsID0gQnVmZmVyOwoJdmFyIGJ1ZiA9IFR5cGUuY3JlYXRlSW5zdGFuY2UoY2wsW3RoaXMxXSk7CglyZXR1cm4gYnVmOwp9Owp0YW5udXNfaW9fXyRCeXRlQXJyYXlfQnl0ZUFycmF5XyRJbXBsXyQuZnJvbUludEFycmF5ID0gZnVuY3Rpb24oaWEpIHsKCXJldHVybiB0YW5udXNfaW9fXyRCeXRlQXJyYXlfQnl0ZUFycmF5XyRJbXBsXyQuX25ldyhpYS5tYXAoZnVuY3Rpb24obikgewoJCXZhciB0aGlzMTsKCQlpZighdGFubnVzX2lvX18kQnl0ZV9CeXRlXyRJbXBsXyQuaXNWYWxpZChuKSkgdGhyb3cgbmV3IGpzX18kQm9vdF9IYXhlRXJyb3IoIkludmFsaWQgQnl0ZSBWYWx1ZSAoIiArIG4gKyAiKSEiKTsKCQl0aGlzMSA9IG47CgkJcmV0dXJuIHRoaXMxOwoJfSkpOwp9Owp0YW5udXNfaW9fXyRCeXRlQXJyYXlfQnl0ZUFycmF5XyRJbXBsXyQuZnJvbUJ5dGVzID0gZnVuY3Rpb24oYnVmKSB7Cgl2YXIgYmEgPSB0YW5udXNfaW9fXyRCeXRlQXJyYXlfQnl0ZUFycmF5XyRJbXBsXyQuX25ldygpOwoJaWYoYnVmLmxlbmd0aCA%:IGNvbnNvbGUgOiB7bG9nOmZ1bmN0aW9uKCl7fX0pOwoKLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29ya2VyX3RlbXAuanMubWFw";
};
TestWorker.__super__ = tannus_concurrent_JSWorker;
TestWorker.prototype = $extend(tannus_concurrent_JSWorker.prototype,{
	process: function(data,callb) {
		tannus_concurrent_JSWorker.prototype.process.call(this,data,callb);
		console.log(data);
		callb({ 'buttsex' : "teen+asian+anal"});
	}
	,__class__: TestWorker
});
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = true;
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) complement = true;
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe_io_Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	if(typeof window != "undefined") return window[name]; else return global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = true;
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var tannus_concurrent_JSBoss = function(name) {
	var entry = null;
};
$hxClasses["tannus.concurrent.JSBoss"] = tannus_concurrent_JSBoss;
tannus_concurrent_JSBoss.__name__ = true;
tannus_concurrent_JSBoss.prototype = {
	__class__: tannus_concurrent_JSBoss
};
var tannus_concurrent_Workers = function() { };
$hxClasses["tannus.concurrent.Workers"] = tannus_concurrent_Workers;
tannus_concurrent_Workers.__name__ = true;
var tannus_ds__$Maybe_Maybe_$Impl_$ = {};
$hxClasses["tannus.ds._Maybe.Maybe_Impl_"] = tannus_ds__$Maybe_Maybe_$Impl_$;
tannus_ds__$Maybe_Maybe_$Impl_$.__name__ = true;
tannus_ds__$Maybe_Maybe_$Impl_$._new = function(x) {
	return x;
};
tannus_ds__$Maybe_Maybe_$Impl_$.or = function(this1,alt) {
	if(this1 != null) return this1; else return alt;
};
tannus_ds__$Maybe_Maybe_$Impl_$.orGetter = function(this1,gettr) {
	if(this1 != null) return this1; else return tannus_io__$Getter_Getter_$Impl_$.to(gettr);
};
tannus_ds__$Maybe_Maybe_$Impl_$.get_exists = function(this1) {
	return this1 != null;
};
tannus_ds__$Maybe_Maybe_$Impl_$.toNonNullable = function(this1) {
	if(this1 != null) return this1; else throw new js__$Boot_HaxeError("TypeError: Cannot declare NULL non-nullable!");
};
tannus_ds__$Maybe_Maybe_$Impl_$.toBoolean = function(this1) {
	return this1 != null;
};
var tannus_ds__$TwoTuple_TwoTuple_$Impl_$ = {};
$hxClasses["tannus.ds._TwoTuple.TwoTuple_Impl_"] = tannus_ds__$TwoTuple_TwoTuple_$Impl_$;
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.__name__ = true;
tannus_ds__$TwoTuple_TwoTuple_$Impl_$._new = function(a,b) {
	return { 'a' : a, 'b' : b};
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.get_one = function(this1) {
	return this1.a;
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.set_one = function(this1,v) {
	return this1.a = v;
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.get_two = function(this1) {
	return this1.b;
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.set_two = function(this1,v) {
	return this1.b = v;
};
tannus_ds__$TwoTuple_TwoTuple_$Impl_$.toString = function(this1) {
	return "(" + Std.string(this1.a) + ", " + Std.string(this1.b) + ")";
};
var tannus_io__$Byte_Byte_$Impl_$ = {};
$hxClasses["tannus.io._Byte.Byte_Impl_"] = tannus_io__$Byte_Byte_$Impl_$;
tannus_io__$Byte_Byte_$Impl_$.__name__ = true;
tannus_io__$Byte_Byte_$Impl_$._new = function(n) {
	var this1;
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	this1 = n;
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.get_self = function(this1) {
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.get_asint = function(this1) {
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.set_asint = function(this1,n) {
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	return this1 = n;
};
tannus_io__$Byte_Byte_$Impl_$.get_aschar = function(this1) {
	return String.fromCharCode(this1);
};
tannus_io__$Byte_Byte_$Impl_$.set_aschar = function(this1,s) {
	var n = HxOverrides.cca(s,0);
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	this1 = n;
	return String.fromCharCode(this1);
};
tannus_io__$Byte_Byte_$Impl_$.isNumeric = function(this1) {
	return new EReg("[0-9]","").match(String.fromCharCode(this1));
};
tannus_io__$Byte_Byte_$Impl_$.isLetter = function(this1) {
	return new EReg("[A-Z]","i").match(String.fromCharCode(this1));
};
tannus_io__$Byte_Byte_$Impl_$.isAlphaNumeric = function(this1) {
	return new EReg("[0-9]","").match(String.fromCharCode(this1)) || new EReg("[A-Z]","i").match(String.fromCharCode(this1));
};
tannus_io__$Byte_Byte_$Impl_$.isWhiteSpace = function(this1) {
	return Lambda.has([9,10,11,12,13,32],this1);
};
tannus_io__$Byte_Byte_$Impl_$.isLineBreaking = function(this1) {
	return Lambda.has([10,13],this1);
};
tannus_io__$Byte_Byte_$Impl_$.equalsi = function(this1,other) {
	return this1 == other;
};
tannus_io__$Byte_Byte_$Impl_$.equalss = function(this1,other) {
	return this1 == HxOverrides.cca(other,0);
};
tannus_io__$Byte_Byte_$Impl_$.repeat = function(this1,times) {
	var s = "";
	while(s.length < times) s += String.fromCharCode(this1);
	return s;
};
tannus_io__$Byte_Byte_$Impl_$.toString = function(this1) {
	return String.fromCharCode(this1);
};
tannus_io__$Byte_Byte_$Impl_$.toInt = function(this1) {
	return this1;
};
tannus_io__$Byte_Byte_$Impl_$.fromString = function(s) {
	var b = 0;
	var n = HxOverrides.cca(s,0);
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
	b = n;
	String.fromCharCode(b);
	return b;
};
tannus_io__$Byte_Byte_$Impl_$.isValid = function(n) {
	return ((n | 0) === n) && isFinite(n) && !isNaN(n);
};
tannus_io__$Byte_Byte_$Impl_$.assertValid = function(n) {
	if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
};
var tannus_io__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["tannus.io._ByteArray.ByteArray_Impl_"] = tannus_io__$ByteArray_ByteArray_$Impl_$;
tannus_io__$ByteArray_ByteArray_$Impl_$.__name__ = true;
tannus_io__$ByteArray_ByteArray_$Impl_$._new = function(a) {
	return a != null?a:[];
};
tannus_io__$ByteArray_ByteArray_$Impl_$.get = function(this1,i) {
	return this1[i];
};
tannus_io__$ByteArray_ByteArray_$Impl_$.set = function(this1,i,nb) {
	this1[i] = nb;
	return this1[i];
};
tannus_io__$ByteArray_ByteArray_$Impl_$.iterator = function(this1) {
	return HxOverrides.iter(this1);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.get_self = function(this1) {
	return this1;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.get_empty = function(this1) {
	return this1.length == 0;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.each = function(this1,func,start,end) {
	var index;
	if(start != null) index = start; else index = 0;
	var goal;
	if(end != null) goal = end; else goal = this1.length;
	if(index < 0) {
		if(end == null) {
			var _i = index;
			index = this1.length + _i;
		} else throw new js__$Boot_HaxeError("Invalid start index " + index + "!");
	}
	var cb;
	while(index < goal) {
		cb = this1[index];
		func(index,cb);
		index++;
	}
};
tannus_io__$ByteArray_ByteArray_$Impl_$.slice = function(this1,start,end) {
	{
		var ia = this1.slice(start,end);
		return tannus_io__$ByteArray_ByteArray_$Impl_$._new(ia.map(function(n) {
			var this2;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
			this2 = n;
			return this2;
		}));
	}
};
tannus_io__$ByteArray_ByteArray_$Impl_$.indexOf = function(this1,sub) {
	var _g1 = 0;
	var _g = this1.length - sub.length;
	while(_g1 < _g) {
		var i = _g1++;
		var hunk = tannus_io__$ByteArray_ByteArray_$Impl_$.slice(this1,i,i + sub.length);
		console.log(hunk.map(function(b) {
			return String.fromCharCode(b);
		}).join(""));
		if(tannus_io__$ByteArray_ByteArray_$Impl_$.equals_byteArray(hunk,sub)) return i;
	}
	return -1;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.contains = function(this1,sub) {
	return Lambda.indexOf(this1,(function($this) {
		var $r;
		var len = sub.length;
		var cl = Buffer;
		var buf = Type.createInstance(cl,[sub]);
		$r = buf;
		return $r;
	}(this))) != -1;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.writeString = function(this1,s) {
	var _g = 0;
	var _g1 = s.split("");
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		this1.push((function($this) {
			var $r;
			var b = 0;
			{
				var n = HxOverrides.cca(c,0);
				if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
				b = n;
				String.fromCharCode(b);
			}
			$r = b;
			return $r;
		}(this)));
	}
};
tannus_io__$ByteArray_ByteArray_$Impl_$.write = function(this1,ba) {
	this1 = this1.concat(ba);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toDataURI = function(this1,mime) {
	if(mime == null) mime = "text/plain";
	var encoded = haxe_crypto_Base64.encode((function($this) {
		var $r;
		var this2 = this1;
		var buf = haxe_io_Bytes.alloc(this2.length);
		tannus_io__$ByteArray_ByteArray_$Impl_$.each(this2,function(i,b) {
			buf.b[i] = b & 255;
		});
		$r = buf;
		return $r;
	}(this)));
	return "data:" + mime + ";base64," + encoded;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.equals_byteArray = function(this1,other) {
	if(this1.length != other.length) return false; else {
		var i = 0;
		while(i < this1.length) {
			if(this1[i] != other[i]) return false;
			i++;
		}
		return true;
	}
};
tannus_io__$ByteArray_ByteArray_$Impl_$.plus = function(this1,other) {
	{
		var ia = this1.concat(other);
		return tannus_io__$ByteArray_ByteArray_$Impl_$._new(ia.map(function(n) {
			var this2;
			if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
			this2 = n;
			return this2;
		}));
	}
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toArray = function(this1) {
	return this1;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toIntArray = function(this1) {
	return this1.map(function(b) {
		return b;
	});
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toString = function(this1) {
	return this1.map(function(b) {
		return String.fromCharCode(b);
	}).join("");
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toBase64 = function(this1) {
	var b;
	{
		var this2 = this1;
		var buf = haxe_io_Bytes.alloc(this2.length);
		tannus_io__$ByteArray_ByteArray_$Impl_$.each(this2,function(i,b1) {
			buf.b[i] = b1 & 255;
		});
		b = buf;
	}
	return haxe_crypto_Base64.encode(b);
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toBytes = function(this1) {
	var buf = haxe_io_Bytes.alloc(this1.length);
	tannus_io__$ByteArray_ByteArray_$Impl_$.each(this1,function(i,b) {
		buf.b[i] = b & 255;
	});
	return buf;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.toNodeBuffer = function(this1) {
	var len = this1.length;
	var cl = Buffer;
	var buf = Type.createInstance(cl,[this1]);
	return buf;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.fromIntArray = function(ia) {
	return tannus_io__$ByteArray_ByteArray_$Impl_$._new(ia.map(function(n) {
		var this1;
		if(!tannus_io__$Byte_Byte_$Impl_$.isValid(n)) throw new js__$Boot_HaxeError("Invalid Byte Value (" + n + ")!");
		this1 = n;
		return this1;
	}));
};
tannus_io__$ByteArray_ByteArray_$Impl_$.fromBytes = function(buf) {
	var ba = tannus_io__$ByteArray_ByteArray_$Impl_$._new();
	if(buf.length > 0) {
		var _g1 = 0;
		var _g = buf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var n = buf.b[i];
			ba.push(n);
		}
	}
	return ba;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.fromNodeBuffer = function(nb) {
	var len = nb.length;
	var bitlist = [];
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		bitlist.push(nb[i]);
	}
	return bitlist;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.fromString = function(s) {
	var ba = tannus_io__$ByteArray_ByteArray_$Impl_$._new();
	tannus_io__$ByteArray_ByteArray_$Impl_$.writeString(ba,s);
	return ba;
};
tannus_io__$ByteArray_ByteArray_$Impl_$.fromBase64 = function(s) {
	var b = haxe_crypto_Base64.decode(s);
	{
		var ba = tannus_io__$ByteArray_ByteArray_$Impl_$._new();
		if(b.length > 0) {
			var _g1 = 0;
			var _g = b.length;
			while(_g1 < _g) {
				var i = _g1++;
				var n = b.b[i];
				ba.push(n);
			}
		}
		return ba;
	}
};
var tannus_io__$Getter_Getter_$Impl_$ = {};
$hxClasses["tannus.io._Getter.Getter_Impl_"] = tannus_io__$Getter_Getter_$Impl_$;
tannus_io__$Getter_Getter_$Impl_$.__name__ = true;
tannus_io__$Getter_Getter_$Impl_$._new = function(f) {
	return f;
};
tannus_io__$Getter_Getter_$Impl_$.get_value = function(this1) {
	return this1();
};
tannus_io__$Getter_Getter_$Impl_$.get = function(this1) {
	return this1();
};
tannus_io__$Getter_Getter_$Impl_$.wrap = function(this1,wrapper) {
	var _f = this1;
	var w = (function(f,a1) {
		return function() {
			return f(a1);
		};
	})(wrapper,_f);
	this1 = w;
};
tannus_io__$Getter_Getter_$Impl_$.to = function(this1) {
	return this1();
};
var tannus_io__$Pointer_Pointer_$Impl_$ = {};
$hxClasses["tannus.io._Pointer.Pointer_Impl_"] = tannus_io__$Pointer_Pointer_$Impl_$;
tannus_io__$Pointer_Pointer_$Impl_$.__name__ = true;
tannus_io__$Pointer_Pointer_$Impl_$._new = function(g,s) {
	return { 'a' : g, 'b' : s};
};
tannus_io__$Pointer_Pointer_$Impl_$.get_value = function(this1) {
	return this1.a();
};
tannus_io__$Pointer_Pointer_$Impl_$.set_value = function(this1,nv) {
	return this1.b(nv);
};
tannus_io__$Pointer_Pointer_$Impl_$.get_getter = function(this1) {
	return this1.a;
};
tannus_io__$Pointer_Pointer_$Impl_$.set_getter = function(this1,ng) {
	return this1.a = ng;
};
tannus_io__$Pointer_Pointer_$Impl_$.get_setter = function(this1) {
	return this1.b;
};
tannus_io__$Pointer_Pointer_$Impl_$.set_setter = function(this1,ns) {
	return this1.b = ns;
};
tannus_io__$Pointer_Pointer_$Impl_$.get = function(this1) {
	return this1.a();
};
tannus_io__$Pointer_Pointer_$Impl_$.set = function(this1,nv) {
	return this1.b(nv);
};
tannus_io__$Pointer_Pointer_$Impl_$.attach_ptr = function(this1,other) {
	var _t = this1.b;
	var other1 = other.b;
	var w = (function(f,a2) {
		return function(a1) {
			return f(a1,a2);
		};
	})(function(v,old) {
		other1(v);
		return old(v);
	},_t);
	_t = w;
	this1.b = _t;
};
tannus_io__$Pointer_Pointer_$Impl_$.attach_setter = function(this1,str) {
	var _t = this1.b;
	var other = str;
	var w = (function(f,a2) {
		return function(a1) {
			return f(a1,a2);
		};
	})(function(v,old) {
		other(v);
		return old(v);
	},_t);
	_t = w;
	this1.b = _t;
};
var tannus_io__$Setter_Setter_$Impl_$ = {};
$hxClasses["tannus.io._Setter.Setter_Impl_"] = tannus_io__$Setter_Setter_$Impl_$;
tannus_io__$Setter_Setter_$Impl_$.__name__ = true;
tannus_io__$Setter_Setter_$Impl_$._new = function(f) {
	return f;
};
tannus_io__$Setter_Setter_$Impl_$.set_value = function(this1,nv) {
	return this1(nv);
};
tannus_io__$Setter_Setter_$Impl_$.set = function(this1,nv) {
	return this1(nv);
};
tannus_io__$Setter_Setter_$Impl_$.wrap = function(this1,wrapper) {
	var w = (function(f,a2) {
		return function(a1) {
			return f(a1,a2);
		};
	})(wrapper,this1);
	this1 = w;
};
tannus_io__$Setter_Setter_$Impl_$.attach = function(this1,other) {
	var w = (function(f,a2) {
		return function(a1) {
			return f(a1,a2);
		};
	})(function(v,old) {
		other(v);
		return old(v);
	},this1);
	this1 = w;
};
var tannus_io_Signal = function() {
	this.handlers = [];
};
$hxClasses["tannus.io.Signal"] = tannus_io_Signal;
tannus_io_Signal.__name__ = true;
tannus_io_Signal.prototype = {
	hasHandler: function(f) {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			if(h.equals(f)) return true;
		}
		return false;
	}
	,listen: function(f,once) {
		if(once == null) once = false;
		var h = new tannus_io_Handler(f,once);
		if(!this.hasHandler(f)) this.handlers.push(h);
	}
	,once: function(f) {
		this.listen(f,true);
	}
	,broadcast: function(data) {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			h.call(data);
		}
	}
	,call: function(data) {
		this.broadcast(data);
	}
	,__class__: tannus_io_Signal
};
var tannus_io_Handler = function(func,onc) {
	if(onc == null) onc = false;
	this.f = func;
	this.once = onc;
	this._called = false;
};
$hxClasses["tannus.io.Handler"] = tannus_io_Handler;
tannus_io_Handler.__name__ = true;
tannus_io_Handler.prototype = {
	equals: function(other) {
		return Reflect.compareMethods(this.f,other);
	}
	,call: function(parameter) {
		if(!this.once || this.once && !this._called) {
			this.f(parameter);
			this._called = true;
		}
	}
	,__class__: tannus_io_Handler
};
var tannus_math_Nums = function() { };
$hxClasses["tannus.math.Nums"] = tannus_math_Nums;
tannus_math_Nums.__name__ = true;
tannus_math_Nums.max = function(x,y) {
	if(x > y) return x; else return y;
};
tannus_math_Nums.min = function(x,y) {
	if(x < y) return x; else return y;
};
tannus_math_Nums.clamp = function(value,x,y) {
	var result = value;
	result = value < y?value:y;
	result = value > x?value:x;
	return result;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = true;
$hxClasses.Array = Array;
Array.__name__ = true;
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
if(Array.prototype.map == null) Array.prototype.map = function(f) {
	var a = [];
	var _g1 = 0;
	var _g = this.length;
	while(_g1 < _g) {
		var i = _g1++;
		a[i] = f(this[i]);
	}
	return a;
};
var ArrayBuffer = typeof(window) != "undefined" && window.ArrayBuffer || typeof(global) != "undefined" && global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = typeof(window) != "undefined" && window.DataView || typeof(global) != "undefined" && global.DataView || js_html_compat_DataView;
var Uint8Array = typeof(window) != "undefined" && window.Uint8Array || typeof(global) != "undefined" && global.Uint8Array || js_html_compat_Uint8Array._new;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
js_Boot.__toStr = {}.toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
TestWorker.main();
})(typeof console != "undefined" ? console : {log:function(){}});

//# sourceMappingURL=main.js.map